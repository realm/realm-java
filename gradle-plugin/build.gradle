import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

buildscript {
    def properties = new Properties()
    properties.load(new FileInputStream("${rootDir}/../dependencies.list"))
    ext.kotlin_version = properties.get('KOTLIN')
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${properties.get('BUILD_INFO_EXTRACTOR_GRADLE')}"
        classpath "io.github.gradle-nexus:publish-plugin:${properties.get("GRADLE_NEXUS_PLUGIN")}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'

def props = new Properties()
props.load(new FileInputStream("${rootDir}/../dependencies.list"))
props.each { key, val ->
    project.ext.set(key, val)
}

repositories {
    mavenLocal()
    google()
    jcenter()
}

sourceCompatibility = 11
targetCompatibility = 11

group = 'io.realm'
version = file("${projectDir}/../version.txt").text.trim()

configurations {
    provided
    compile.extendsFrom provided
}

test {
    testLogging.showStandardStreams = true
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation "io.realm:realm-transformer:${version}"
    /*Note: the latest Android Gradle plugin has now built in support for annotation processors and warns and/or blocks android-apt,
     see this https://bitbucket.org/hvisser/android-apt/wiki/Migration page on how to migrate
     and this https://www.littlerobots.nl/blog/Whats-next-for-android-apt/ for more info.
   */
    implementation 'com.neenbedankt.gradle.plugins:android-apt:1.8' //TODO: https://www.littlerobots.nl/blog/Whats-next-for-android-apt/
    compileOnly "com.android.tools.build:gradle:${props.get("GRADLE_BUILD_TOOLS")}"

    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'
    testImplementation "com.android.tools.build:gradle:${props.get("GRADLE_BUILD_TOOLS")}"
    // See https://github.com/gradle/gradle/issues/16774#issuecomment-893493869
    def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
            .getModule("gradle-tooling-api-builders")
            .classpath
            .asFiles
            .first()
    testRuntimeOnly(files(toolingApiBuildersJar))
}

task generateVersionClass(type: Copy) {
    from 'src/main/templates/Version.kt'
    into 'build/generated-src/main/kotlin/io/realm'
    filter(ReplaceTokens, tokens: [version: version])
    outputs.upToDateWhen { false }
}

// Include the generated Version file
sourceSets {
    main {
        java {
            srcDirs += ['build/generated-src/main/kotlin']
        }
    }
}

compileKotlin.dependsOn generateVersionClass

apply from: "${rootDir}/../mavencentral-publications.gradle"
apply from: "${rootDir}/../mavencentral-publish.gradle"

publishing {
    publications {
        realmPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId = 'realm-gradle-plugin'
            from components.java
            populatePom(
                    it,
                    'realm-gradle-plugin',
                    'Gradle plugin for Realm. Realm is a mobile database: Build better apps, faster.'
            )
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}
