buildscript {
    def properties = new Properties()
    properties.load(new FileInputStream("${rootDir}/../dependencies.list"))

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${properties.get('BUILD_INFO_EXTRACTOR_GRADLE')}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${properties.get('GRADLE_BINTRAY_PLUGIN')}"
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'

def props = new Properties()
props.load(new FileInputStream("${rootDir}/../dependencies.list"))
props.each { key, val ->
    project.ext.set(key, val)
}

repositories {
    mavenLocal()
    google()
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'io.realm'
version = file("${projectDir}/../version.txt").text.trim()

configurations {
    provided
    compile.extendsFrom provided
}

test {
    testLogging.showStandardStreams = true
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "io.realm:realm-transformer:${version}"
    /*Note: the latest Android Gradle plugin has now built in support for annotation processors and warns and/or blocks android-apt,
     see this https://bitbucket.org/hvisser/android-apt/wiki/Migration page on how to migrate
     and this https://www.littlerobots.nl/blog/Whats-next-for-android-apt/ for more info.
   */
    compile 'com.neenbedankt.gradle.plugins:android-apt:1.8' //TODO: https://www.littlerobots.nl/blog/Whats-next-for-android-apt/
    compileOnly "com.android.tools.build:gradle:${props.get("GRADLE_BUILD_TOOLS")}"

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'
    testCompile "com.android.tools.build:gradle:${props.get("GRADLE_BUILD_TOOLS")}"
}

//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

task generateVersionClass(type: Copy) {
    from 'src/main/templates/Version.java'
    into 'build/generated-src/main/java/io/realm'
    filter(ReplaceTokens, tokens: [version: version])
    outputs.upToDateWhen { false }
}

// Include the generated Version file
sourceSets {
    main {
        java {
            srcDir 'build/generated-src/main/java'
        }
    }
}

compileJava.dependsOn generateVersionClass

apply from: "${rootDir}/../mavencentral-publish.gradle"

publishing {
    publications {
        realmPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId = 'realm-gradle-plugin'
            from components.java
            populatePom(
                    it,
                    'realm-gradle-plugin',
                    'Gradle plugin for Realm. Realm is a mobile database: Build better apps, faster.'
            )
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}
