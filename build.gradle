buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'ch.netzwerg:gradle-release-plugin:1.2.0'
    }
}

apply plugin: 'ch.netzwerg.release'

def currentVersion = file("${projectDir}/version.txt").text.trim();

def props = new Properties()
props.load(new FileInputStream("${rootDir}/realm.properties"))
props.each { key, val ->
    project.ext.set(key, val)
}

task assembleAnnotations(type:GradleBuild) {
    group = 'Build'
    description = 'Assemble the Realm annotations'
    buildFile = file('realm-annotations/build.gradle')
    tasks = ['assemble']
}

task installAnnotations(type:GradleBuild) {
    group = 'Install'
    description = 'Install the jar realm-annotations into mavenLocal()'
    buildFile = file('realm-annotations/build.gradle')
    tasks = ['publishToMavenLocal']
}

task assembleTransformer(type:GradleBuild) {
    group = 'Build'
    description = 'Assemble the Realm transformer'
    dependsOn installAnnotations
    buildFile = file('realm-transformer/build.gradle')
    tasks = ['assemble']
}

task installTransformer(type:GradleBuild) {
    group = 'Install'
    description = 'Install the jar realm-transformer into mavenLocal()'
    dependsOn installAnnotations
    buildFile = file('realm-transformer/build.gradle')
    tasks = ['publishToMavenLocal']
}

task assembleRealm(type:GradleBuild) {
    group = 'Build'
    description = 'Assemble the Realm project'
    dependsOn installAnnotations
    dependsOn installTransformer
    buildFile = file('realm/build.gradle')
    tasks = ['assemble', 'javadocJar', 'sourcesJar']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
    if (project.hasProperty('s3cfg')) {
        startParameter.projectProperties += [s3cfg: project.getProperty('s3cfg')]
    }
}

task checkExamples(type:GradleBuild) {
    group = 'Test'
    description = 'Run the JVM tests and checks the examples'
    buildFile = file('examples/build.gradle')
    tasks = ['check']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task checkRealm(type:GradleBuild) {
    group = 'Test'
    description = 'Run the JVM tests and checks Realm project'
    buildFile = file('realm/build.gradle')
    tasks = ['check']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task check {
    group = 'Test'
    description = 'Run the JVM tests and checks in the realm and examples projects'
    dependsOn checkRealm
    dependsOn checkExamples
}

task connectedUnitTests(type:GradleBuild) {
    group = 'Test'
    description = 'Run the Android unit tests of the Realm project'
    dependsOn installTransformer
    buildFile = file('realm/build.gradle')
    tasks = ['connectedAndroidTest']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task connectedBenchmarks(type:GradleBuild) {
    group = 'Test'
    description = 'Run all the benchmark tests for the library '
    dependsOn installTransformer
    buildFile = file('library-benchmarks/build.gradle')
    tasks = ['connectedAndroidTest']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task installRealm(type:GradleBuild) {
    group = 'Install'
    description = 'Install the artifacts of Realm libraries into mavenLocal()'
    dependsOn installTransformer
    buildFile = file('realm/build.gradle')
    tasks = ['publishToMavenLocal']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
    if (project.hasProperty('s3cfg')) {
        startParameter.projectProperties += [s3cfg: project.getProperty('s3cfg')]
    }
}

task assembleGradlePlugin(type:GradleBuild) {
    group = 'Build'
    description = 'Assemble the Realm Gradle plugin'
    dependsOn installRealm
    dependsOn installTransformer
    buildFile = file('gradle-plugin/build.gradle')
    tasks = ['assemble']
}

task installGradlePlugin(type:GradleBuild) {
    description = 'Install the Realm Gradle plugin into mavenLocal()'
    group = 'Install'
    dependsOn installRealm
    dependsOn installTransformer
    buildFile = file('gradle-plugin/build.gradle')
    tasks = ['publishToMavenLocal']
}

task installRealmJava(type:Task) {
    dependsOn installGradlePlugin
    dependsOn installRealm
    group = 'Install'
    description = 'Install the Realm library and Gradle plugin into mavenLocal()'
}

task assembleExamples(type:GradleBuild) {
    dependsOn installGradlePlugin
    dependsOn installRealm
    group = 'Build'
    description = 'Assemble the Realm examples'
    buildFile = file('examples/build.gradle')
    tasks = ['assemble']
}

task monkeyExamples(type:GradleBuild) {
    dependsOn installGradlePlugin
    dependsOn installRealm
    group = 'Build'
    description = 'Run the monkey tests on the Realm examples'
    buildFile = file('examples/build.gradle')
    tasks = ['monkeyRelease']
}

task javadoc(type:GradleBuild) {
    description = 'Generate the Javadoc Jar for the Realm project'
    group = 'Docs'
    buildFile = file('realm/build.gradle')
    tasks = ['javadocJar']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task sourcesJar(type:GradleBuild) {
    description = 'Generate the sources Jar for the Realm project'
    group = 'Docs'
    buildFile = file('realm/build.gradle')
    tasks = ['sourcesJar']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task assemble {
    group 'Build'
    description = 'Build Realm, the Gradle plugin and the examples'
    dependsOn assembleExamples
}

task distributionPackage(type:Zip) {
    description = 'Generate the distribution package'
    dependsOn assembleRealm
    dependsOn javadoc

    group = 'Artifact'
    archiveName = "realm-java-${currentVersion}.zip"
    destinationDir = file("${buildDir}/outputs/distribution")

    from('changelog.txt')
    from('LICENSE')
    from('version.txt')
    from('realm.properties')
    from('realm/realm-library/build/libs') {
        include 'realm-android-${currentVersion}-javadoc.jar'
        into 'docs'
    }
    from('realm/realm-library/build/docs') {
        include '**/*'
        into 'docs'
    }
    from('examples') {
        exclude 'local.properties'
        exclude '**/.gradle'
        exclude '**/build'
        into 'examples'
    }
}

task distributionJniUnstrippedPackage(type:Zip) {
    description = 'Generate native libs package with debug symbols'
    dependsOn assembleRealm

    group = 'Artifact'
    archiveName = "realm-java-jni-libs-unstripped-${currentVersion}.zip"
    destinationDir = file("${buildDir}/outputs/distribution")

    from("realm/realm-library/build/outputs/jniLibs-unstripped") {
        include '**/*.so'
    }
}

task cleanRealm(type:GradleBuild) {
    description = 'Clean the Realm project'
    group = 'Clean'
    buildFile = file('realm/build.gradle')
    tasks = ['clean']
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
    if (project.hasProperty('dontCleanJniFiles')) {
        startParameter.projectProperties += [dontCleanJniFiles: project.getProperty('dontCleanJniFiles')]
    }
}

task cleanGradlePlugin(type:GradleBuild) {
    description = 'Clean the Realm Gradle plugin project'
    group = 'Clean'
    buildFile = file('gradle-plugin/build.gradle')
    tasks = ['clean']
}

task cleanExamples(type:GradleBuild) {
    description = 'Clean the Realm examples'
    group = 'Clean'
    buildFile = file('examples/build.gradle')
    tasks = ['clean']
}

task cleanLocalMavenRepos(type:Delete) {
    description = 'Remove any Realm artifacts from the local Maven repositories'
    group = 'Clean'
    delete "${System.env.HOME}/.m2/repository/io/realm"
}

task clean {
    description = 'Perform all the other clean tasks'
    group = 'Clean'
    cleanLocalMavenRepos.dependsOn cleanRealm
    cleanLocalMavenRepos.dependsOn cleanGradlePlugin
    cleanLocalMavenRepos.dependsOn cleanExamples
    dependsOn cleanLocalMavenRepos
}

task manualClean {
    description = 'Clean build files without using clean tasks defined in sub projects'
    group = 'Clean'

    doLast {
        // clean 'build' directories
        exec {
            workingDir "${rootDir}"
            commandLine 'find', '.', '-type', 'd', '-name', 'build', '-print', '-exec', 'rm', '-rf', '{}', ';', '-prune'
        }

        // clean '.externalNativeBuild' directories
        exec {
            workingDir "${rootDir}"
            commandLine 'find', '.', '-type', 'd', '-name', '.externalNativeBuild', '-print', '-exec', 'rm', '-rf', '{}', ';', '-prune'
        }

        // clean '.gradle' directories except one in the root
        exec {
            workingDir "${rootDir}"
            commandLine 'find', '.', '-mindepth', '2', '-type', 'd', '-name', '.gradle', '-print', '-exec', 'rm', '-rf', '{}', ';', '-prune'
        }

        // clean ${System.env.HOME}/.m2/repository/io/realm
        exec {
            workingDir "${rootDir}"
            commandLine 'sh', '-c', "echo \"${System.env.HOME}/.m2/repository/io/realm\" && rm -rf \"${System.env.HOME}/.m2/repository/io/realm\""
        }
    }
}

task uploadDistributionPackage {
    group = 'Release'
    description = 'Upload the distribution package to S3'
    dependsOn distributionPackage
    dependsOn distributionJniUnstrippedPackage
    doLast {
        exec {
            workingDir "${buildDir}/outputs/distribution/"
            commandLine 's3cmd', 'put', "realm-java-${currentVersion}.zip", 's3://static.realm.io/downloads/java/'
        }
        exec {
            workingDir "${buildDir}/outputs/distribution/"
            commandLine 's3cmd', 'put', "realm-java-jni-libs-unstripped-${currentVersion}.zip", 's3://static.realm.io/downloads/java/'
        }
    }
}

task createEmptyFile(type: Exec) {
    group = 'Release'
    description = 'Create an empty file that will serve as a link on S3'
    dependsOn uploadDistributionPackage
    commandLine 'touch', 'latest'
}

['java', 'android'].each() { link ->
    task "upload${link.capitalize()}LatestLink"(type: Exec) {
        group = 'Release'
        description = "Update the link to the latest version for ${link.capitalize()}"
        dependsOn createEmptyFile
        commandLine 's3cmd', 'put', 'latest', "--add-header=x-amz-website-redirect-location:/downloads/java/realm-java-${currentVersion}.zip", "s3://static.realm.io/downloads/${link}/latest"
    }
}

task uploadUpdateVersion(type: Exec) {
    group = 'Release'
    description = 'Update the file on S3 containing the latest version'
    ['java', 'android'].each() { link ->
        dependsOn "upload${link.capitalize()}LatestLink"
    }
    commandLine 's3cmd', 'put', "${rootDir}/version.txt", 's3://static.realm.io/update/java'
}

task distribute {
    group = 'Release'
    description = 'Distribute release artifacts to S3'
    dependsOn uploadUpdateVersion
}

task bintrayRealm(type: GradleBuild) {
    description = 'Publish the Realm AAR and AP to Bintray'
    group = 'Publishing'
    buildFile = file('realm/build.gradle')
    tasks = ['bintrayUpload']
    startParameter.projectProperties = gradle.startParameter.projectProperties
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task bintrayAnnotations(type: GradleBuild) {
    description = 'Publish the Realm Annotations to Bintray'
    group = 'Publishing'
    buildFile = file('realm-annotations/build.gradle')
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['bintrayUpload']
}

task bintrayGradlePlugin(type: GradleBuild) {
    description = 'Publish the Realm Gradle Plugin to Bintray'
    group = 'Publishing'
    buildFile = file('gradle-plugin/build.gradle')
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['bintrayUpload']
}

task bintrayTransformer(type: GradleBuild) {
    description = 'Publish the Realm Transformer to Bintray'
    group = 'Publishing'
    buildFile = file('realm-transformer/build.gradle')
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['bintrayUpload']
}

task bintrayUpload {
    description = 'Publish all the Realm artifacts to Bintray'
    group = 'Publishing'
    dependsOn bintrayRealm
    dependsOn bintrayAnnotations
    dependsOn bintrayGradlePlugin
    dependsOn bintrayTransformer
}

task ojoRealm(type: GradleBuild) {
    description = 'Publish the Realm AAR and AP SNAPSHOT to Bintray'
    group = 'Publishing'
    buildFile = file('realm/build.gradle')
    tasks = ['ojoUpload']
    startParameter.projectProperties = gradle.startParameter.projectProperties
    if (project.hasProperty('buildTargetABIs')) {
        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]
    }
}

task ojoAnnotations(type: GradleBuild) {
    description = 'Publish the Realm Annotations SNAPSHOT to Bintray'
    group = 'Publishing'
    buildFile = file('realm-annotations/build.gradle')
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['artifactoryPublish']
}

task ojoGradlePlugin(type: GradleBuild) {
    description = 'Publish the Realm Gradle Plugin SNAPSHOT to Bintray'
    group = 'Publishing'
    buildFile = file('gradle-plugin/build.gradle')
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['artifactoryPublish']
}

task ojoTransformer(type: GradleBuild) {
    description = 'Publish the Realm Transformer SNAPSHOT to Bintray'
    group = 'Publishing'
    buildFile = file('realm-transformer/build.gradle')
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['artifactoryPublish']
}

task ojoUpload {
    description = 'Publish all the Realm SNAPSHOT artifacts to OJO'
    group = 'Publishing'
    dependsOn ojoRealm
    dependsOn ojoAnnotations
    dependsOn ojoGradlePlugin
    dependsOn ojoTransformer
}

// This is just a placeholder for the release plugin
task build {}

release {
    push = false
    versionSuffix = '-SNAPSHOT'
    tagPrefix = 'v'
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
}
