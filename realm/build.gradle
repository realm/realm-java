apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 20
    }

// TODO: re-enable once bug-fix is released
//    jacoco {
//        version = '0.7.2.201409121644'
//    }
//
//    buildTypes {
//        debug {
//            testCoverageEnabled true
//        }
//    }

}

dependencies {
    compile 'com.intellij:annotations:+@jar'
    compile files("../realm-annotations/build/libs/realm-annotations-${version}.jar")
    androidTestApt files("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar")
    androidTestApt files("../realm-annotations/build/libs/realm-annotations-${version}.jar")
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        group 'Docs'
        description "Generates Javadoc for ${variant.name}."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude "**/internal/**"
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: tasks["generate${variant.name.capitalize()}Javadoc"]) {
        group 'Docs'
        description "Generates Javadoc for ${variant.name} in Jar format."
        classifier = 'javadoc'
        from tasks["generate${variant.name.capitalize()}Javadoc"].destinationDir
    }
}

task androidJar(type: Jar, dependsOn: 'assemble') {
    group 'Build'
    description 'Generates a jar file continaining Realm and its annotation processor'
    from zipTree('build/intermediates/bundles/release/classes.jar')
    from zipTree("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar")
    from zipTree("../realm-annotations/build/libs/realm-annotations-${version}.jar")
    from(file('src/main/jniLibs')) {
        into 'lib'
    }
}

task compileJniWithEncryption(type: GradleBuild) {
    dir = file('../realm-jni')
    tasks = ['buildAndroidJniWithEncryption']
}

task androidJarWithEncryption(type: Jar) {
    group 'Build'
    description 'Generates a jar file continaining Realm and its annotation processor with encryption support'
    dependsOn assemble
    dependsOn compileJniWithEncryption
    from zipTree('build/intermediates/bundles/release/classes.jar')
    from zipTree("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar")
    from zipTree("../realm-annotations/build/libs/realm-annotations-${version}.jar")
    from(file('src/main/jniLibs')) {
        into 'lib'
    }
    archiveName "${baseName}-encryption-${version}.${extension}"
}

task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives file("build/libs/realm-${version}.jar")
    archives androidSourcesJar
}

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android'
            version version
            artifact androidJar
            artifact androidSourcesJar {
                classifier "sources"
            }
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-android')
                root.appendNode('description', 'Realm is a mobile database: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/realm/realm-java/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/realm/realm-java')
                scm.appendNode('connection', 'scm:git@github.com:realm/realm-java.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:realm/realm-java.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
        mavenAndroidWithEncryption(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-crypto'
            version version
            artifact androidJarWithEncryption
            artifact androidSourcesJar {
                classifier "sources"
            }
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-android-crypto')
                root.appendNode('description', 'Realm is a mobile database: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/realm/realm-java/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/realm/realm-java')
                scm.appendNode('connection', 'scm:git@github.com:realm/realm-java.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:realm/realm-java.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser' // this comes from the gradle.properties file in ~/.gradle
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey' //this comes from the gradle.properties file in ~/.gradle
    publications = ['mavenAndroid', 'mavenAndroidWithEncryption']
    publish = true
    pkg {
        repo = 'maven'
        name = 'realm-android'
        licenses = ['Apache-2.0']
    }
}

task buildApt(type: GradleBuild) {
    dir = file('../realm-annotations-processor')
    tasks = ['assemble']
}

task compileJni(type: GradleBuild) {
    dir = file('../realm-jni')
    tasks = ['buildAndroidJni']
}

task compileAnnotations(type: GradleBuild) {
    dir = file('../realm-annotations')
    tasks = ['assemble']
}

tasks.preBuild {
    dependsOn compileJni
    dependsOn compileAnnotations
    dependsOn buildApt
}
