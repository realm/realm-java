apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 20
    }

// TODO: re-enable once bug-fix is released
//    jacoco {
//        version = '0.7.2.201409121644'
//    }
//
//    buildTypes {
//        debug {
//            testCoverageEnabled true
//        }
//    }

}

dependencies {
    compile 'com.intellij:annotations:+@jar'
    compile files("../realm-annotations/build/libs/realm-annotations-${version}.jar")
    androidTestApt files("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar")
    androidTestApt files("../realm-annotations/build/libs/realm-annotations-${version}.jar")
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return; // Skip debug builds.
    }

    def javadocTask = task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        group 'Docs'
        source = variant.javaCompile.source
        source "../realm-annotations/src/main/java"
        ext.androidJar = files(project.android.getBootClasspath())
        classpath = files(variant.javaCompile.classpath.files) + ext.androidJar
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.addStringOption('Xdoclint:none', '-quiet')
        exclude '**/internal/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        group 'Docs'
        classifier = "javadoc"
        from javadocTask
    }
}

task androidJar(type: Jar, dependsOn: ['assemble']) {
    group 'Build'
    description 'Generates a jar file containing Realm and its annotation processor'
    from zipTree('build/intermediates/bundles/release/classes.jar')
    from zipTree("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar")
    from zipTree("../realm-annotations/build/libs/realm-annotations-${version}.jar")
    from(file('src/main/jniLibs')) {
        into 'lib'
    }
}

task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives file("build/libs/realm-${version}.jar")
    archives androidSourcesJar
}

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android'
            version version
            artifact androidJar
            artifact androidSourcesJar {
                classifier "sources"
            }
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-android')
                root.appendNode('description', 'Realm is a mobile database: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/realm/realm-java/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/realm/realm-java')
                scm.appendNode('connection', 'scm:git@github.com:realm/realm-java.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:realm/realm-java.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

if (version.endsWith('-SNAPSHOT')) { // Only publish if it's a snapshot version
    publishing {
        repositories {
            maven {
                url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
                credentials {
                    // user and password come from the gradle.properties file in ~/.gradle
                    username project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
                    password project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
                }
            }
        }
    }
} else {
    bintray {
        // user and key come from the gradle.properties file in ~/.gradle
        user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
        key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        publications = ['mavenAndroid']
        publish = true
        pkg {
            repo = 'maven'
            name = 'realm-android'
            licenses = ['Apache-2.0']
        }
    }
}

task buildApt(type: GradleBuild) {
    dir = file('../realm-annotations-processor')
    tasks = ['shadowJar']
}

task compileJni(type: GradleBuild) {
    dir = file('../realm-jni')
    tasks = ['buildAndroidJni']
}

task compileAnnotations(type: GradleBuild) {
    dir = file('../realm-annotations')
    tasks = ['assemble']
}

project.afterEvaluate {
    preBuild.dependsOn(['compileJni', 'compileAnnotations', 'buildApt'])
}

// exampleDir : [distributionDir, [ exampleSrcParentDir, distibutionSrcParentDir], ...]
// exampleDir -> Name of example dir
// distributionDir -> Name of distribution dir
// [ exampleModuleDir, distModuleDir ] -> where to find module dir to copy. Add one for each submodule.
// First sub module must be the app module
def examples = [
    introExample: ["RealmIntroExample", ["" : "app"]],
    gridViewExample: ["RealmGridViewExample", ["" : "app"]],
    migrationExample: ["RealmMigrationExample", ["" : "app"]],
    adapterExample: ["RealmAdapterExample", ["" : "app"]],
    threadExample: ["RealmThreadExample", ["" : "app"]],
    jsonExample: ["RealmJsonExample", ["" : "app"]],
    encryptionExample: ["RealmEncryptionExample", ["" : "app"]],
    realmModuleExample: ["RealmModuleExample", [ app : "app"], [ library : "library"]]
]

def abi = [ 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86' ]

//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

def private copyGradleBuildFile(String fromDir, String toDir) {
    println "copy ${fromDir}"
    println "to ${toDir}"
    copy {
        from "${fromDir}/build.gradle"
        into "${toDir}"
        filter(ReplaceTokens, tokens: [version: version])
    }
}

// Copy build.gradle (if present) from all configured folders
task generateDistributionExamplesBuildFiles << {
    examples.each() { exampleDir, params ->
        String distDir = params[0];
        String baseFromDir = "${rootDir}/tools/templates/${distDir}"
        String baseToDir = "${rootDir}/distribution/${distDir}"
        copyGradleBuildFile(baseFromDir, baseToDir)
        for (int i = 1; i < params.size(); i++) {
            params[i].each() { moduleFolder, destFolder ->
                copyGradleBuildFile("${baseFromDir}/${destFolder}", "${baseToDir}/${destFolder}")
            }
        }
    }
}

task populateDistributionFolder(dependsOn: ['androidJar', 'bundleJavadocRelease']) << {
    copy {
        from '../changelog.txt'
        from "build/libs/realm-${version}.jar"
        from "build/libs/realm-${version}-javadoc.jar"
        into '../distribution'
    }
    copy {
        from 'build/docs/javadoc'
        into '../distribution/javadoc'
    }
    examples.each() { exampleDir, params ->
        String distributionDir = params[0];
        for (int i = 1; i < params.size(); i++) {
            params[i].each() { moduleFolder, destFolder ->
                String src = moduleFolder.isEmpty() ? "src" : moduleFolder + "/src"
                copy {
                    from "../examples/${exampleDir}/${src}"
                    into "../distribution/${distributionDir}/${destFolder}/src"
                }
            }
        }
    }
}

task copyLibrariesToEclipseFolder(dependsOn: 'androidJar') << {
    copy {
        from zipTree("build/libs/realm-${version}.jar")
        into 'build/intermediates/eclipse'
    }
    abi.each() { abiName ->
        copy {
            from "build/intermediates/eclipse/lib/${abiName}/librealm-jni.so"
            into "../distribution/eclipse/${abiName}"
        }
    }
}

task createEclipseJar(type: Zip) {
    dependsOn 'copyLibrariesToEclipseFolder'
    from 'build/intermediates/eclipse'
    exclude 'lib'
    destinationDir = new File("${rootDir}/distribution/eclipse")
    archiveName = "realm-${version}.jar"
}

task createDistributionFolder() {
    dependsOn 'generateDistributionExamplesBuildFiles'
    dependsOn 'populateDistributionFolder'
    dependsOn 'createEclipseJar'
}

task createDistributionPackage(type: Zip) {
    group 'Release'
    description 'Build the release distribution package'
    dependsOn 'createDistributionFolder'
    from "${rootDir}/distribution"
    into "realm-java-${version}"
    destinationDir = new File("${rootDir}")
    archiveName = "realm-java-${version}.zip"
}

examples.each() { exampleDir, params ->
    String distDir = params[0];
    String appModule = params[1][1]
    task "distributionMonkey${distDir}"(type: GradleBuild) {
        dependsOn createDistributionPackage
        //dependsOn bintrayUpload
        dir = file("${rootDir}/distribution/${distDir}/${appModule}")
        tasks = ['monkeyRelease']
    }
}

task uploadDistributionPackage(type: Exec) {
    examples.each { exampleDir, params ->
        dependsOn "distributionMonkey${params[0]}"
    }
    commandLine 's3cmd', 'put', "${rootDir}/realm-java-${version}.zip", 's3://static.realm.io/downloads/java/'
}

task createEmptyFile(type: Exec) {
    dependsOn uploadDistributionPackage
    commandLine 'touch', 'latest'
}

['java', 'android'].each() { link ->
    task "upload${link.capitalize()}LatestLink"(type: Exec) {
        dependsOn createEmptyFile
        commandLine 's3cmd', 'put', 'latest', "--add-header=x-amz-website-redirect-location:/downloads/java/realm-java-${version}.zip", "s3://static.realm.io/downloads/${link}/latest"
    }
}


task uploadUpdateVersion(type: Exec) {
    ['java', 'android'].each() { link ->
        dependsOn "upload${link.capitalize()}LatestLink"
    }
    commandLine 's3cmd', 'put', "${rootDir}/version.txt", 's3://static.realm.io/update/java'
}

task tagRepo(type: Exec) {
    dependsOn uploadUpdateVersion
    workingDir rootDir
    commandLine 'git', 'tag', '-a', "v${version}", '-m', "v${version}"
}

task pushTag(type: Exec) {
    dependsOn tagRepo
    workingDir rootDir
    commandLine 'git', 'push', '--tags'
}

task release {
    group 'Release'
    description 'Release realm-java'
    dependsOn pushTag
}

apply plugin: 'findbugs'

task findbugs(type: FindBugs) {
    dependsOn assemble
    ignoreFailures = false
    effort = "default"
    reportLevel = "medium"
    excludeFilter = new File("${projectDir}/findbugs-filter.xml")
    classes = files("${projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/findbugs/findbugs-output.xml"
        }
        html {
            destination "$project.buildDir/findbugs/findbugs-output.html"
        }
    }
}

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    // empty classpath
    classpath = files()
}
