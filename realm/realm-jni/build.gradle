import java.security.MessageDigest

ext.coreVersion = '0.94.4'
// empty or comment out this to disable hash checking
ext.coreSha256Hash = 'feeae46e5ebdb7ce912b3f111b6a044c4dd0ef7b7eac9b313f8c7a40664d9fae'
ext.forceDownloadCore = false
ext.clang = false // gcc is default for the NDK. It also produces smaller binaries

def commonCflags = [ '-std=c++11', '-ffunction-sections', '-fdata-sections', '-flto' ]

enum Compiler {
    GCC, CLANG
}

// Unfortunately the NDK has no consistency when it comes to naming.
// This Class holds all the different names used and some more informations
class Toolchain {
    // The standard name: arm, arm64, mips, x86
    String name

    // The name used when generating the standalone toolchain
    String fullName

    // The prefix commands use. i.e. arm-linux-androideabi-gcc
    String commandPrefix

    // Which version of each compiler to use
    Map<Compiler, String> version

    // The first Android platform to support this toolchain
    int platform
}

// This class describes the specific target
class Target {
    // The name of the target. This is used for the task names
    String name

    // The name of the folder the Android Gradle plugin expects to find the shared library
    String jniFolder

    // The toolchain associated to this target
    Toolchain toolchain

    // The CFLAGS specific to this target
    List<String> cflags
}

// We are using gcc 4.8 for 32 bits targets and 4.9 for 64 bits targets, as the NDK defaults.
def toolchains = [
    new Toolchain( name:'arm', fullName:'arm-linux-androideabi', commandPrefix:'arm-linux-androideabi', version:[ (Compiler.GCC):'4.8', (Compiler.CLANG):'3.5' ], platform:8 ),
    new Toolchain( name:'arm64', fullName:'aarch64-linux-android', commandPrefix:'aarch64-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:21 ),
    new Toolchain( name:'mips', fullName:'mipsel-linux-android', commandPrefix:'mipsel-linux-android', version:[ (Compiler.GCC):'4.8', (Compiler.CLANG):'3.5' ], platform:9 ),
    new Toolchain( name:'x86', fullName:'x86', commandPrefix:'i686-linux-android', version:[ (Compiler.GCC):'4.8', (Compiler.CLANG):'3.5' ], platform:9 ),
    new Toolchain( name:'x86_64', fullName:'x86_64', commandPrefix:'x86_64-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:21 )
]

def targets = [
    new Target( name:'arm', jniFolder:'armeabi', toolchain:toolchains.find{it.name == 'arm'}, cflags:[ '-mthumb' ] ),
    new Target( name:'arm-v7a', jniFolder:'armeabi-v7a', toolchain:toolchains.find{it.name == 'arm'}, cflags:[ '-mthumb', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16' ] ),
    new Target( name:'arm64', jniFolder:'arm64-v8a', toolchain:toolchains.find{it.name == 'arm64'}, cflags:[] ),
    new Target( name:'mips', jniFolder:'mips', toolchain:toolchains.find{it.name == 'mips'}, cflags:[] ),
    new Target( name:'x86', jniFolder:'x86', toolchain:toolchains.find{it.name == 'x86'}, cflags:[] ),
    new Target( name:'x86_64', jniFolder:'x86_64', toolchain:toolchains.find{it.name == 'x86_64'}, cflags:[] )
]

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:2.0.0'
    }
}

apply plugin: 'de.undercouch.download'

if (project.clang instanceof String) {
    ext.clang = Boolean.parseBoolean(project.clang)
}
if (project.forceDownloadCore instanceof String) {
    ext.forceDownloadCore = Boolean.parseBoolean(project.forceDownloadCore)
}

def getNdk() {
    if (!System.env.NDK_HOME) {
        throw new GradleException('The NDK_HOME environment variable is not set.')
    }
    def ndkDir = file(System.env.NDK_HOME)
    if (!ndkDir.directory) {
        throw new GradleException('The path provided in the NDK_HOME environment variable is not a folder.')
    }
    if (!file("${ndkDir}/RELEASE.TXT").file) {
        throw new GradleException('The path provided in the NDK_HOME environment variable does not seem to be an Android NDK.')
    }
    def detectedNdkVersion = file("${ndkDir}/RELEASE.TXT").text.trim().split()[0]
    if (detectedNdkVersion != ndkVersion) {
        throw new GradleException("Your NDK version: ${detectedNdkVersion}. Realm JNI should be compiled with the version ${ndkVersion} of NDK.")
    }
    return ndkDir
}

ext.coreArchiveFile = rootProject.file("../core-android-${project.coreVersion}.tar.gz")
ext.coreDir = file("${buildDir}/core-${project.coreVersion}")

def coreDownloaded = false

task downloadCore(group: 'build setup', description: 'Download the latest version of realm core') {
    def isHashCheckingEnabled = {
        return project.hasProperty('coreSha256Hash') && !project.coreSha256Hash.empty
    }

    def calcSha256Hash = {File targetFile ->
        MessageDigest sha = MessageDigest.getInstance("SHA-256");
        Formatter hexHash = new Formatter()
        sha.digest(targetFile.bytes).each { b -> hexHash.format('%02x', b) }
        return hexHash.toString()
    }

    def shouldDownloadCore = {
        if (!project.coreArchiveFile.exists()) {
            return true
        }
        if (project.forceDownloadCore) {
            return true;
        }
        if (!isHashCheckingEnabled()) {
            println "Skipping hash check(empty \'coreSha256Hash\')."
            return false
        }

        def calculatedHash = calcSha256Hash(project.coreArchiveFile)
        if (project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
            return false
        }

        println "Existing archive hash mismatch(Expected: ${project.coreSha256Hash.toLowerCase()}" +
                " but got ${calculatedHash.toLowerCase()}). Download new version."
        return true
    }

    doLast {
        if (shouldDownloadCore()) {
            download {
                src "http://static.realm.io/downloads/core/realm-core-android-${project.coreVersion}.tar.gz"
                dest project.coreArchiveFile
                onlyIfNewer false
            }
            coreDownloaded = true

            if (isHashCheckingEnabled()) {
                def calculatedHash = calcSha256Hash(project.coreArchiveFile)
                if (!project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
                    throw new GradleException("Invalid checksum for file '" +
                            "${project.coreArchiveFile.getName()}'. Expected " +
                            "${project.coreSha256Hash.toLowerCase()} but got " +
                            "${calculatedHash.toLowerCase()}.");
                }
            } else {
                println 'Skipping hash check(empty \'coreSha256Hash\').'
            }
        }
    }
}

task deployCore(group: 'build setup', description: 'Deploy the latest version of realm core') {
    dependsOn { downloadCore }

    outputs.upToDateWhen {
        if (coreDownloaded) {
            return false
        }

        return project.coreDir.exists()
    }

    doLast {
        exec {
            commandLine = [
                    'rm',
                    '-rf',
                    project.coreDir.getAbsolutePath()
            ]
        }
        copy {
            from tarTree(project.coreArchiveFile)
            into project.coreDir
        }
        for (target in targets) {
            exec {
                commandLine = [
                        'make',
                        '-C', "${projectDir}/src",
                        "BASE_DENOM=${target.name}",
                        'LIB_SUFFIX_SHARED=.so',
                        'clean'
                ]
            }
        }
    }
}

toolchains.each { toolchain ->
    def ndkDir = getNdk()
    task "generateNdkToolchain${toolchain.name.capitalize()}"(type: Exec) {
        group 'build setup'
        description "Generate the NDK standalone toolchain for the ${toolchain.name.capitalize()} platform"
        outputs.dir file("${buildDir}/standalone-toolchains/${toolchain.name}")
        commandLine = [
            "bash",
            "${ndkDir}/build/tools/make-standalone-toolchain.sh",
            "--platform=android-${toolchain.platform}",
            "--install-dir=${buildDir}/standalone-toolchains/${toolchain.name}",
            "--toolchain=${toolchain.fullName}-${clang?'clang'+toolchain.version[Compiler.CLANG]:toolchain.version[Compiler.GCC]}"
        ]
    }
}

targets.each { target ->
    task "buildAndroidJni${target.name.capitalize()}"(type: Exec) {
        group 'build'
        description "Build the Android JNI shared library for the ${target.name.capitalize()} platform"
        dependsOn deployCore
        dependsOn "generateNdkToolchain${target.toolchain.name.capitalize()}"
        environment PATH: "${buildDir}/standalone-toolchains/${target.toolchain.name}/bin:${System.env.PATH}"
        environment CC: "${target.toolchain.commandPrefix}-${clang?'clang':'gcc'}"
        environment STRIP: "${target.toolchain.commandPrefix}-strip -o librealm-jni-${target.name}-stripped.so"
        environment REALM_ANDROID: '1'
        commandLine = [
            'make',
            "-j${Runtime.getRuntime().availableProcessors() * 2}",
            "-l${Runtime.getRuntime().availableProcessors()}",
            '-C', "${projectDir}/src",
            "CC_IS=${clang?'clang':'gcc'}",
            "REALM_CFLAGS=-Wno-variadic-macros -DREALM_HAVE_CONFIG -DPIC -I${project.coreDir}/include",
            "CFLAGS_ARCH=${(commonCflags + target.cflags).join(' ')}",
            "BASE_DENOM=${target.name}",
            "REALM_LDFLAGS=-lrealm-android-${target.name} -lstdc++ -lsupc++ -llog -L${project.coreDir} -Wl,--gc-sections -flto",
            'LIB_SUFFIX_SHARED=.so',
            "librealm-jni-${target.name}.so"
        ]
    }

    task "copyAndroidJni${target.name.capitalize()}"(dependsOn: "buildAndroidJni${target.name.capitalize()}") << {
        copy {
            from "${projectDir}/src/librealm-jni-${target.name}-stripped.so"
            into "${projectDir}/../realm-library/src/main/jniLibs/${target.jniFolder}"
            rename "librealm-jni-${target.name}-stripped.so", 'librealm-jni.so'
        }

        // Store the unstripped version
        copy {
            from "${projectDir}/src/librealm-jni-${target.name}.so"
            into "${projectDir}/../build/output/jniLibs-unstripped/${target.jniFolder}"
            rename "librealm-jni-${target.name}.so", 'librealm-jni.so'
        }
    }
}

task buildAndroidJni(group: 'build', description: 'Build the Android JNI shared library for all the supported platforms') {
    targets.each { target ->
        dependsOn "copyAndroidJni${target.name.capitalize()}"
    }
}

task clean(type: Delete) {
    delete project.buildDir

    delete fileTree(dir: "${projectDir}/../realm-library/src/main/jniLibs/", include: '**/librealm-jni*.so')
    delete fileTree(dir: "${projectDir}/../build/output/jniLibs-unstripped/", include: '**/librealm-jni*.so')

    doLast {
        targets.each { target ->
            exec {
                commandLine = [
                        'make',
                        '-C', "${projectDir}/src",
                        "BASE_DENOM=${target.name}",
                        'LIB_SUFFIX_SHARED=.so',
                        'clean'
                ]
            }
        }
    }
}
