import java.security.MessageDigest

ext.coreVersion = '1.0.1'
// empty or comment out this to disable hash checking
ext.coreSha256Hash = 'e132f5824dc31e683353fb0be91eb45cac702f88f8cee819499a1dfa7936aeac'
ext.forceDownloadCore =
        project.hasProperty('forceDownloadCore') ? project.getProperty('forceDownloadCore').toBoolean() : false
// gcc is default for the NDK. It also produces smaller binaries
ext.clang = project.hasProperty('clang') ? project.getProperty('clang').toBoolean() : false
// Build with debug symbols
ext.debugBuild = project.hasProperty('debugBuild') ? project.getProperty('debugBuild').toBoolean() : false
// Strip the symbols from the so file or not. If debugBuild is true, this one will be always false.
ext.stripSymbols = project.hasProperty('stripSymbols') ? project.getProperty('stripSymbols').toBoolean() : true
// Set the core source code path. By setting this, the core will be built from source. And coreVersion will be read from
// core source code.
ext.coreSourcePath = project.hasProperty('coreSourcePath') ? project.getProperty('coreSourcePath') : null
// The location of core archive.
ext.coreArchiveDir = System.getenv("REALM_CORE_DOWNLOAD_DIR")
// target ABIs to build(null means all).
// To obtain the ABI of the connected device, execute "adb shell getprop ro.product.cpu.abi"
ext.buildTargetAbis = project.hasProperty('buildTargetABIs') ? project.getProperty('buildTargetABIs').split(',').collect {it.trim()} : null

def commonCflags = [ '-Os', '-std=c++11' ]
// LTO and debugging don't play well together
if (!ext.debugBuild) {
    commonCflags += [ '-fvisibility=hidden', '-ffunction-sections', '-fdata-sections', '-flto' ]
}

enum Compiler {
    GCC, CLANG
}

// Unfortunately the NDK has no consistency when it comes to naming.
// This Class holds all the different names used and some more information
class Toolchain {
    // The standard name: arm, arm64, mips, x86
    String name

    // The name used when generating the standalone toolchain
    String fullName

    // The prefix commands use. i.e. arm-linux-androideabi-gcc
    String commandPrefix

    // Which version of each compiler to use
    Map<Compiler, String> version

    // The first Android platform to support this toolchain
    int platform
}

// This class describes the specific target
class Target {
    // The name of the target. This is used for the task names
    String name

    // The name of the abi. It is also the name of the folder where the Android Gradle plugin
    // expects to find the shared library
    String abi

    // The toolchain associated to this target
    Toolchain toolchain

    // The CFLAGS specific to this target
    List<String> cflags
}

// We are using gcc 4.9 for all architectures
def toolchains = [
    new Toolchain( name:'arm', fullName:'arm-linux-androideabi', commandPrefix:'arm-linux-androideabi', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:8 ),
    new Toolchain( name:'arm64', fullName:'aarch64-linux-android', commandPrefix:'aarch64-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:21 ),
    new Toolchain( name:'mips', fullName:'mipsel-linux-android', commandPrefix:'mipsel-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:9 ),
    new Toolchain( name:'x86', fullName:'x86', commandPrefix:'i686-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:9 ),
    new Toolchain( name:'x86_64', fullName:'x86_64', commandPrefix:'x86_64-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:21 )
]

def allTargets = [
    new Target( name:'arm',     abi:'armeabi',     toolchain:toolchains.find {it.name == 'arm'},    cflags:[ '-mthumb' ] ),
    new Target( name:'arm-v7a', abi:'armeabi-v7a', toolchain:toolchains.find {it.name == 'arm'},    cflags:[ '-mthumb', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16' ] ),
    new Target( name:'arm64',   abi:'arm64-v8a',   toolchain:toolchains.find {it.name == 'arm64'},  cflags:[] ),
    new Target( name:'mips',    abi:'mips',        toolchain:toolchains.find {it.name == 'mips'},   cflags:[] ),
    new Target( name:'x86',     abi:'x86',         toolchain:toolchains.find {it.name == 'x86'},    cflags:[] ),
    new Target( name:'x86_64',  abi:'x86_64',      toolchain:toolchains.find {it.name == 'x86_64'}, cflags:[] )
]

def targets
if (ext.buildTargetAbis == null) {
    targets = allTargets;
} else {
    targets = ext.buildTargetAbis.collect { targetAbi ->
        def target = allTargets.find {it.abi == targetAbi}
        if (!target) {
            throw new GradleException("Warning: no target ABIs found for '${targetAbi}'." +
                    " Please check 'buildTargetABIs' property." +
                    " Supprted ABIs are ${allTargets.collect {it.abi}. join(', ')}.")
        }
        return target
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:2.0.0'
    }
}

apply plugin: 'de.undercouch.download'

if (ext.debugBuild) {
    // Debug build should never strip symbols
    ext.stripSymbols = false
}
if (ext.coreSourcePath) {
    // Run the "sh build.sh get-version" to get the core version.
    ext.coreVersion = "sh build.sh get-version".execute([], file(coreSourcePath)).text.trim()
}

def getNdk() {
    if (!System.env.NDK_HOME) {
        throw new GradleException('The NDK_HOME environment variable is not set.')
    }
    def ndkDir = file(System.env.NDK_HOME)
    if (!ndkDir.directory) {
        throw new GradleException('The path provided in the NDK_HOME environment variable is not a folder.')
    }
    if (!file("${ndkDir}/RELEASE.TXT").file) {
        throw new GradleException('The path provided in the NDK_HOME environment variable does not seem to be an Android NDK.')
    }
    def detectedNdkVersion = file("${ndkDir}/RELEASE.TXT").text.trim().split()[0].split('-')[0]
    if (detectedNdkVersion != ndkVersion) {
        throw new GradleException("Your NDK version: ${detectedNdkVersion}. Realm JNI should be compiled with the version ${ndkVersion} of NDK.")
    }
    return ndkDir
}

def getStrippedExt() {
    return stripSymbols ? "-stripped" : ""
}

def getDebugExt() {
    return debugBuild ? "-dbg" : ""
}

if (!ext.coreArchiveDir) {
    ext.coreArchiveDir = ".."
}
ext.coreArchiveFile = rootProject.file("${ext.coreArchiveDir}/core-android-${project.coreVersion}.tar.gz")
ext.coreDir = file("${buildDir}/core-${project.coreVersion}")

def coreDownloaded = false

task downloadCore(group: 'build setup', description: 'Download the latest version of realm core') {
    def isHashCheckingEnabled = {
        return project.hasProperty('coreSha256Hash') && !project.coreSha256Hash.empty
    }

    def calcSha256Hash = {File targetFile ->
        MessageDigest sha = MessageDigest.getInstance("SHA-256");
        Formatter hexHash = new Formatter()
        sha.digest(targetFile.bytes).each { b -> hexHash.format('%02x', b) }
        return hexHash.toString()
    }

    def shouldDownloadCore = {
        if (!project.coreArchiveFile.exists()) {
            return true
        }
        if (project.forceDownloadCore) {
            return true;
        }
        if (!isHashCheckingEnabled()) {
            println "Skipping hash check(empty \'coreSha256Hash\')."
            return false
        }

        def calculatedHash = calcSha256Hash(project.coreArchiveFile)
        if (project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
            return false
        }

        println "Existing archive hash mismatch(Expected: ${project.coreSha256Hash.toLowerCase()}" +
                " but got ${calculatedHash.toLowerCase()}). Download new version."
        return true
    }

    doLast {
        if (shouldDownloadCore()) {
            download {
                src "http://static.realm.io/downloads/core/realm-core-android-${project.coreVersion}.tar.gz"
                dest project.coreArchiveFile
                onlyIfNewer false
            }
            coreDownloaded = true

            if (isHashCheckingEnabled()) {
                def calculatedHash = calcSha256Hash(project.coreArchiveFile)
                if (!project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
                    throw new GradleException("Invalid checksum for file '" +
                            "${project.coreArchiveFile.getName()}'. Expected " +
                            "${project.coreSha256Hash.toLowerCase()} but got " +
                            "${calculatedHash.toLowerCase()}.");
                }
            } else {
                println 'Skipping hash check(empty \'coreSha256Hash\').'
            }
        }
    }
}

task compileCore(group: 'build setup', description: 'Compile the core library from source code') {
    // Build the library from core source code
    doFirst {
        if (!coreSourcePath) {
            throw new GradleException('The coreSourcePath is not set.')
        }
        exec {
            workingDir = coreSourcePath
            commandLine = [
                    "bash",
                    "build.sh",
                    "build-android"
            ]
        }
    }

    // Copy the core tar ball
    doLast {
        copy {
            from "${coreSourcePath}/realm-core-android-${coreVersion}.tar.gz"
            into project.coreArchiveFile.parent
            rename "realm-core-android-${coreVersion}.tar.gz", "core-android-${coreVersion}.tar.gz"
        }
    }
}

task deployCore(group: 'build setup', description: 'Deploy the latest version of realm core') {
    dependsOn {
        coreSourcePath ? compileCore : downloadCore
    }

    outputs.upToDateWhen {
        // Clean up the coreDir if it is newly downloaded or compiled from source
        if (coreDownloaded || coreSourcePath) {
            return false
        }

        return project.coreDir.exists()
    }

    doLast {
        exec {
            commandLine = [
                    'rm',
                    '-rf',
                    project.coreDir.getAbsolutePath()
            ]
        }
        copy {
            from tarTree(project.coreArchiveFile)
            into project.coreDir
        }
	exec {
	    commandLine = [ 'git', 'clean', '-xfd', "${projectDir}/src" ]
	}
    }
}

toolchains.each { toolchain ->
    def ndkDir = getNdk()
    task "generateNdkToolchain${toolchain.name.capitalize()}"(type: Exec) {
        group 'build setup'
        description "Generate the NDK standalone toolchain for the ${toolchain.name.capitalize()} platform"
        outputs.dir file("${buildDir}/standalone-toolchains/${toolchain.name}")
        commandLine = [
            "bash",
            "${ndkDir}/build/tools/make-standalone-toolchain.sh",
            "--platform=android-${toolchain.platform}",
            "--install-dir=${buildDir}/standalone-toolchains/${toolchain.name}",
            "--toolchain=${toolchain.fullName}-${clang?'clang'+toolchain.version[Compiler.CLANG]:toolchain.version[Compiler.GCC]}"
        ]
    }
}

targets.each { target ->
    task "buildAndroidJni${target.name.capitalize()}"(type: Exec) {
        group 'build'
        description "Build the Android JNI shared library for the ${target.name.capitalize()} platform"
        dependsOn deployCore
        dependsOn "generateNdkToolchain${target.toolchain.name.capitalize()}"
        environment PATH: "${buildDir}/standalone-toolchains/${target.toolchain.name}/bin:${System.env.PATH}"
        environment CC: "${target.toolchain.commandPrefix}-${clang?'clang':'gcc'}"
        environment STRIP: "${target.toolchain.commandPrefix}-strip -o librealm-jni-${target.name}-stripped.so"
        environment REALM_ANDROID: '1'
        commandLine = [
            'make',
            "-j${Runtime.getRuntime().availableProcessors() * 2}",
            "-l${Runtime.getRuntime().availableProcessors()}",
            '-C', "${projectDir}/src",
            "CC_IS=${clang?'clang':'gcc'}",
            "REALM_CFLAGS_COMMON=-Wno-variadic-macros -DREALM_HAVE_CONFIG -DPIC -I${project.coreDir}/include",
            "CFLAGS_ARCH=${(commonCflags + target.cflags).join(' ')}",
            "BASE_DENOM=${target.name}",
            "REALM_LDFLAGS_COMMON=-lrealm-android-${target.name} -lstdc++ -lsupc++ -llog -L${project.coreDir} -Wl,--gc-sections -Wl,-soname,librealm-jni.so",
            'LIB_SUFFIX_SHARED=.so',
            "librealm-jni-${target.name}${getDebugExt()}.so"
        ]
    }

    task "copyAndroidJni${target.name.capitalize()}"(dependsOn: "buildAndroidJni${target.name.capitalize()}") << {
        copy {
            from "${projectDir}/src/librealm-jni-${target.name}${getDebugExt()}${getStrippedExt()}.so"
            into "${projectDir}/../realm-library/src/main/jniLibs/${target.abi}"
            rename "librealm-jni-${target.name}${getDebugExt()}${getStrippedExt()}.so", 'librealm-jni.so'
        }

        // Store the unstripped version
        copy {
            from "${projectDir}/src/librealm-jni-${target.name}${getDebugExt()}.so"
            into "${buildDir}/outputs/jniLibs-unstripped/${target.abi}"
            rename "librealm-jni-${target.name}${getDebugExt()}.so", 'librealm-jni.so'
        }
    }
}

task buildAndroidJni(group: 'build', description: 'Build the Android JNI shared library for all the supported platforms') {
    targets.each { target ->
        dependsOn "copyAndroidJni${target.name.capitalize()}"
    }
}

task clean(type: Delete) {
    outputs.upToDateWhen {
        project.hasProperty('dontCleanJniFiles')
    }

    delete project.buildDir

    delete fileTree(dir: "${projectDir}/../realm-library/src/main/jniLibs/", include: '**/librealm-jni*.so')
    delete fileTree(dir: "${projectDir}/src/", include: '**/librealm-jni*-stripped.so')

    doLast {
        targets.each { target ->
            exec {
                commandLine = [
                        'make',
                        '-C', "${projectDir}/src",
                        "BASE_DENOM=${target.name}",
                        'LIB_SUFFIX_SHARED=.so',
                        'clean'
                ]
            }
        }
    }
}
