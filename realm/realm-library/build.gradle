import java.security.MessageDigest

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'de.undercouch.download'
apply plugin: 'net.ltgt.errorprone'

def properties = new Properties()
properties.load(new FileInputStream("${projectDir}/../../dependencies.list"))

ext.coreVersion = properties.getProperty('REALM_SYNC_VERSION')
// empty or comment out this to disable hash checking
ext.coreSha256Hash = properties.getProperty('REALM_SYNC_SHA256')
ext.forceDownloadCore =
        project.hasProperty('forceDownloadCore') ? project.getProperty('forceDownloadCore').toBoolean() : false
// Set the core source code path. By setting this, the core will be built from source. And coreVersion will be read from
// core source code.
ext.coreSourcePath = project.hasProperty('coreSourcePath') ? project.getProperty('coreSourcePath') : null
// The location of core archive.
ext.coreArchiveDir = System.getenv("REALM_CORE_DOWNLOAD_DIR")
if (!ext.coreArchiveDir) {
    ext.coreArchiveDir = ".."
}
ext.coreArchiveFile = rootProject.file("${ext.coreArchiveDir}/realm-sync-android-${project.coreVersion}.tar.gz")
ext.coreDistributionDir = file("${projectDir}/distribution/realm-core/")
ext.coreDir = file(project.coreSourcePath ?
        "${project.coreSourcePath}/android-lib" :
        "${project.coreDistributionDir.getAbsolutePath()}/core-${project.coreVersion}")
ext.ccachePath = project.findProperty('ccachePath') ?: System.getenv('NDK_CCACHE')
ext.lcachePath = project.findProperty('lcachePath') ?: System.getenv('NDK_LCACHE')

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionName version
        project.archivesBaseName = "realm-android-library"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DREALM_CORE_DIST_DIR:STRING=${project.coreDir.getAbsolutePath()}",
                        // FIXME:
                        // This is copied from https://dl.google.com/android/repository/cmake-3.4.2909474-linux-x86_64.zip
                        // because of the android.toolchain.cmake shipped with Android SDK CMake 3.6 doesn't work with our
                        // JNI build currently (lack of lto linking support).
                        // This file should be removed and use the one from Android SDK cmake package when it supports lto.
                        "-DCMAKE_TOOLCHAIN_FILE=${project.file('src/main/cpp/android.toolchain.cmake').path}"
                if (project.ccachePath) arguments "-DNDK_CCACHE=$project.ccachePath"
                if (project.lcachePath) arguments "-DNDK_LCACHE=$project.lcachePath"
                if (project.hasProperty('buildTargetABIs') && !project.getProperty('buildTargetABIs').trim().isEmpty()) {
                    abiFilters(*project.getProperty('buildTargetABIs').trim().split('\\s*,\\s*'))
                } else {
                    // armeabi is not supported anymore.
                    abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a', 'mips'
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    sourceSets {
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
        }
        androidTestObjectServer {
            java.srcDirs += 'src/syncIntegrationTest/java'
            assets.srcDirs += ['src/syncIntegrationTest/assets/']
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        base {
            externalNativeBuild {
                cmake {
                    arguments "-DREALM_FLAVOR=base"
                }
            }
            consumerProguardFiles 'proguard-rules-common.pro', 'proguard-rules-base.pro'
        }
        objectServer {
            externalNativeBuild {
                cmake {
                    arguments "-DREALM_FLAVOR=objectServer"
                }
            }
            consumerProguardFiles 'proguard-rules-common.pro', 'proguard-rules-objectServer.pro'
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name

        // Ignore the objectServer flavour when building from core source.
        if (coreSourcePath && names.contains("objectServer")) {
            variant.ignore = true
        }
    }
}

project.afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Werror'
    }
}

coveralls.jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"

import io.realm.transformer.RealmTransformer

android.registerTransform(new RealmTransformer())

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {

    provided 'io.reactivex:rxjava:1.1.0'
    provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'

    compile "io.realm:realm-annotations:${version}"
    compile 'com.getkeepsafe.relinker:relinker:1.2.2'

    kaptObjectServer project(':realm-annotations-processor')
    objectServerCompile 'com.squareup.okhttp3:okhttp:3.4.1'

    kaptAndroidTest project(':realm-annotations-processor')
    androidTestCompile fileTree(dir: 'testLibs', include: ['*.jar'])
    androidTestCompile 'io.reactivex:rxjava:1.1.0'
    androidTestCompile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    androidTestCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.objectServer.java.srcDirs
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

def betaTag = 'Beta:a:<div style="border-style:solid;border-width:2px">This software is considered in beta phase. ' +
        'It indicates that any public interface can change without prior announcements. ' +
        'Moreover, classes, constructors, and methods annotated as beta are not ' +
        'considered at production quality, and should be used with care.</div>'

task javadoc(type: Javadoc) {
    source android.sourceSets.objectServer.java.srcDirs
    source android.sourceSets.main.java.srcDirs
    source "../../realm-annotations/src/main/java"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        title = "Realm ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        overview = 'src/overview.html'

        links "https://docs.oracle.com/javase/7/docs/api/"
        links "http://reactivex.io/RxJava/javadoc/"
        linksOffline "https://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"

        tags = [betaTag]
    }
    exclude '**/internal/**'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    doLast {
        copy {
            from "src/realm-java-overview.png"
            into "$buildDir/docs/javadoc"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task findbugs(type: FindBugs) {
    dependsOn assemble
    group = 'Verification'

    ignoreFailures = false
    effort = "default"
    reportLevel = "medium"
    excludeFilter = file("${projectDir}/../config/findbugs/findbugs-filter.xml")
    classes = files("${projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/findbugs/findbugs-output.xml"
        }
        html {
            destination "$project.buildDir/findbugs/findbugs-output.html"
        }
    }
}

task pmd(type: Pmd) {
    group = 'Verification'

    source = fileTree('src/main/java')
    ruleSetFiles = files("${projectDir}/../config/pmd/ruleset.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Configure Checkstyle
// Android sourceSets are not sourceSets, so we can't confgure this with the DSL.
task checkstyle(type: Checkstyle) {
    group = 'Verification'

    source 'src'
    include '*/java/**/*.java'
    // Ingore tests for now.
    exclude '*Test*/**'

    // empty classpath
    classpath = files()
}

checkstyle {
    toolVersion ="7.6"

    configFile = file("${projectDir}/../config/checkstyle/checkstyle.xml")

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    ignoreFailures = true
}
check.dependsOn tasks.checkstyle

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'realm-android-library'
                description 'Realm is a mobile database: a replacement for SQLite & ORMs.'
                url 'http://realm.io'

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                issueManagement {
                    system 'github'
                    url 'https://github.com/realm/realm-java/issues'
                }
                scm {
                    url 'scm:https://github.com/realm/realm-java'
                    connection 'scm:git@github.com:realm/realm-java.git'
                    developerConnection 'scm:git@github.com:realm/realm-java.git'
                }
            }
        }
    }
}

// The publications doesn't know about our AAR dependencies, so we have to manually add them to the pom
// Credit: http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
def createPomDependencies(configurationNames) {
    return {
        def dependenciesNode = asNode().appendNode('dependencies')
        configurationNames.each { configurationName ->
            configurations[configurationName].allDependencies.each {
                if (it.group != null && it.name != null) {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)

                    //If there are any exclusions in dependency
                    if (it.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        it.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        basePublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-library'
            version project.version
            artifact file("${rootDir}/realm-library/build/outputs/aar/realm-android-library-base-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom.withXml(createPomDependencies(["baseCompile", "compile"]))
        }

        objectServerPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-library-object-server'
            version project.version
            artifact file("${rootDir}/realm-library/build/outputs/aar/realm-android-library-objectServer-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom.withXml(createPomDependencies(["objectServerCompile", "compile"]))
        }
    }
    repositories {
        maven {
            credentials(AwsCredentials) {
                accessKey project.hasProperty('s3AccessKey') ? s3AccessKey : 'noAccessKey'
                secretKey project.hasProperty('s3SecretKey') ? s3SecretKey : 'noSecretKey'
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "s3://realm-ci-artifacts/maven/snapshots/"
            } else {
                url "s3://realm-ci-artifacts/maven/releases/"
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        }
        defaults {
            publications('basePublication', 'objectServerPublication')
            publishPom = true
            publishIvy = false
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


def coreDownloaded = false

task downloadCore() {
    group = 'build setup'
    description = 'Download the latest version of Realm Core'
    def isHashCheckingEnabled = {
        return project.hasProperty('coreSha256Hash') && !project.coreSha256Hash.empty
    }

    def calcSha256Hash = { File targetFile ->
        MessageDigest sha = MessageDigest.getInstance("SHA-256")
        Formatter hexHash = new Formatter()
        sha.digest(targetFile.bytes).each { b -> hexHash.format('%02x', b) }
        return hexHash.toString()
    }

    def shouldDownloadCore = {
        if (!project.coreArchiveFile.exists()) {
            return true
        }
        if (project.forceDownloadCore) {
            return true;
        }
        if (!isHashCheckingEnabled()) {
            println "Skipping hash check(empty \'coreSha256Hash\')."
            return false
        }

        def calculatedHash = calcSha256Hash(project.coreArchiveFile)
        if (project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
            return false
        }

        println "Existing archive hash mismatch (Expected: ${project.coreSha256Hash.toLowerCase()}" +
                " but got ${calculatedHash.toLowerCase()}). Download new version."
        return true
    }

    doLast {
        if (shouldDownloadCore()) {
            download {
                src "http://static.realm.io/downloads/sync/realm-sync-android-${project.coreVersion}.tar.gz"
                dest project.coreArchiveFile
                onlyIfNewer false
            }
            coreDownloaded = true

            if (isHashCheckingEnabled()) {
                def calculatedHash = calcSha256Hash(project.coreArchiveFile)
                if (!project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
                    throw new GradleException("Invalid checksum for file '" +
                            "${project.coreArchiveFile.getName()}'. Expected " +
                            "${project.coreSha256Hash.toLowerCase()} but got " +
                            "${calculatedHash.toLowerCase()}.");
                }
            } else {
                println 'Skipping hash check (empty \'coreSha256Hash\').'
            }
        }
    }
}

task compileCore(group: 'build setup', description: 'Compile the core library from source code') {
    // Build the library from core source code
    doFirst {
        if (!coreSourcePath) {
            throw new GradleException('The coreSourcePath is not set.')
        }
        exec {
            workingDir = coreSourcePath
            commandLine = [
                    "bash",
                    "build.sh",
                    "build-android"
            ]
        }
    }

    // Copy the core tar ball
    doLast {
        copy {
            from "${coreSourcePath}/realm-core-android-${coreVersion}.tar.gz"
            into project.coreArchiveFile.parent
            rename "realm-core-android-${coreVersion}.tar.gz", "realm-sync-android-${coreVersion}.tar.gz"
        }
    }
}

task deployCore(group: 'build setup', description: 'Deploy the latest version of Realm Core') {
    dependsOn {
        coreSourcePath ? compileCore : downloadCore
    }

    // Build with the output from core source dir. No need to deploy anything.
    onlyIf {
        return !coreSourcePath
    }

    outputs.upToDateWhen {
        // Clean up the coreDir if it is newly downloaded
        if (coreDownloaded) {
            return false
        }

        return project.coreDir.exists()
    }

    doLast {
        // Delete all files to avoid multiple copies of the same header file in Android Studio.
        exec {
            commandLine = [
                    'rm',
                    '-rf',
                    project.coreDistributionDir.getAbsolutePath()
            ]
        }
        copy {
            from tarTree(project.coreArchiveFile)
            into project.coreDir
        }
    }
}

publishToMavenLocal.dependsOn assemble
preBuild.dependsOn deployCore

if (project.hasProperty('dontCleanJniFiles')) {
    project.afterEvaluate {
        tasks.all { task ->
            if (task.name.startsWith('externalNativeBuildClean')) {
                task.enabled = false
            }
        }
    }
} else {
    task cleanExternalBuildFiles(type: Delete) {
        delete project.file('.externalNativeBuild')
        // Clean .so files that were created by old build script (realm/realm-jni/build.gradle).
        delete project.file('src/main/jniLibs')
    }
    clean.dependsOn cleanExternalBuildFiles
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.externalNativeBuildTasks[0].dependsOn(checkNdk)
        if (project.hasProperty('buildTargetABIs') && project.getProperty('buildTargetABIs').trim().isEmpty()) {
            variant.externalNativeBuildTasks[0].enabled = false
        }
    }
}

task checkNdk() {
    doLast {
        def ndkPathInEnvVariable = System.env.ANDROID_NDK_HOME
        if (!ndkPathInEnvVariable) {
            throw new GradleException("The environment variable 'ANDROID_NDK_HOME' must be set.")
        }
        checkNdk(ndkPathInEnvVariable)

        def localPropFile = rootProject.file('local.properties')
        if (!localPropFile.exists()) {
            // we can skip the checks since 'ANDROID_NDK_HOME' will be used instead.
        } else {
            def String ndkPathInLocalProperties = getValueFromPropertiesFile(localPropFile, 'ndk.dir')
            if (!ndkPathInLocalProperties) {
                throw new GradleException("'ndk.dir' must be set in ${localPropFile.getAbsolutePath()}.")
            }
            checkNdk(ndkPathInLocalProperties)
            if (new File(ndkPathInLocalProperties).getCanonicalPath()
                    != new File(ndkPathInEnvVariable).getCanonicalPath()) {
                throw new GradleException(
                        "The value of environment variable 'ANDROID_NDK_HOME' (${ndkPathInEnvVariable}) and"
                                + " 'ndk.dir' in 'local.properties' (${ndkPathInLocalProperties}) "
                                + ' must point the same directory.')
            }
        }
    }
}

android.productFlavors.all { flavor ->
    def librarySuffix = flavor.name == 'base' ? '' : '-object-server'
    def userName = project.findProperty('bintrayUser') ?: 'noUser'
    def accessKey = project.findProperty('bintrayKey') ?: 'noKey'

    // BINTRAY

    task("bintrayAar${flavor.name.capitalize()}", type: Exec) {
        dependsOn "assemble${flavor.name.capitalize()}"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/outputs/aar/realm-android-library-${flavor.name}-release.aar",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}.aar?publish=0"
    }

    task("bintraySources${flavor.name.capitalize()}", type: Exec) {
        dependsOn sourcesJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-android-library-${project.version}-sources.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}-sources.jar?publish=0"
    }

    task("bintrayJavadoc${flavor.name.capitalize()}", type: Exec) {
        dependsOn javadocJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-android-library-${project.version}-javadoc.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}-javadoc.jar?publish=0"
    }

    task("bintrayPom${flavor.name.capitalize()}", type: Exec) {
        dependsOn "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/realm-android-library${librarySuffix}/${project.version}/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}.pom?publish=0"
    }

    // OJO

    task("ojoAar${flavor.name.capitalize()}", type: Exec) {
        dependsOn "assemble${flavor.name.capitalize()}"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/outputs/aar/realm-android-library-${flavor.name}-release.aar",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}.aar?publish=0"
    }

    task("ojoSources${flavor.name.capitalize()}", type: Exec) {
        dependsOn sourcesJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-android-library-${project.version}-sources.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}-sources.jar?publish=0"
    }

    task("ojoJavadoc${flavor.name.capitalize()}", type: Exec) {
        dependsOn javadocJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-android-library-${project.version}-javadoc.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}-javadoc.jar?publish=0"
    }

    task("ojoPom${flavor.name.capitalize()}", type: Exec) {
        dependsOn "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/realm-android-library${librarySuffix}/${project.version}/realm-android-library${librarySuffix}-${project.version}.pom?publish=0"
    }

    task("bintray${flavor.name.capitalize()}") {
        dependsOn "bintrayAar${flavor.name.capitalize()}"
        dependsOn "bintraySources${flavor.name.capitalize()}"
        dependsOn "bintrayJavadoc${flavor.name.capitalize()}"
        dependsOn "bintrayPom${flavor.name.capitalize()}"
        group = 'Publishing'
    }

    task("ojo${flavor.name.capitalize()}") {
        dependsOn "ojoAar${flavor.name.capitalize()}"
        dependsOn "ojoSources${flavor.name.capitalize()}"
        dependsOn "ojoJavadoc${flavor.name.capitalize()}"
        dependsOn "ojoPom${flavor.name.capitalize()}"
        group = 'Publishing'
    }
}

task bintrayUpload() {
    android.productFlavors.all { flavor ->
        dependsOn "bintray${flavor.name.capitalize()}"
    }
    group = 'Publishing'
}

task ojoUpload() {
    android.productFlavors.all { flavor ->
        dependsOn "ojo${flavor.name.capitalize()}"
    }
    group = 'Publishing'
}

def checkNdk(String ndkPath) {
    def detectedNdkVersion
    def releaseFile = new File(ndkPath, 'RELEASE.TXT')
    def propertyFile = new File(ndkPath, 'source.properties')
    if (releaseFile.isFile()) {
        detectedNdkVersion = releaseFile.text.trim().split()[0].split('-')[0]
    } else if (propertyFile.isFile()) {
        detectedNdkVersion = getValueFromPropertiesFile(propertyFile, 'Pkg.Revision')
        if (detectedNdkVersion == null) {
            throw new GradleException("Failed to obtain the NDK version information from ${ndkPath}/source.properties")
        }
    } else {
        throw new GradleException("Neither ${releaseFile.getAbsolutePath()} nor ${propertyFile.getAbsolutePath()} is a file.")
    }
    if (detectedNdkVersion != project.ndkVersion) {
        throw new GradleException("Your NDK version: ${detectedNdkVersion}."
                + " Realm JNI must be compiled with the version ${project.ndkVersion} of NDK.")
    }
}

static def getValueFromPropertiesFile(File propFile, String key) {
    if (!propFile.isFile() || !propFile.canRead()) {
        return null
    }
    def prop = new Properties()
    def reader = propFile.newReader()
    try {
        prop.load(reader)
    } finally {
        reader.close()
    }
    return prop.get(key)
}
