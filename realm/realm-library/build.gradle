import java.security.MessageDigest

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.spotbugs-base'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'de.undercouch.download'
apply plugin: 'net.ltgt.errorprone'

def properties = new Properties()
properties.load(new FileInputStream("${projectDir}/../../dependencies.list"))

ext.ccachePath = project.findProperty('ccachePath') ?: System.getenv('NDK_CCACHE')
ext.lcachePath = project.findProperty('lcachePath') ?: System.getenv('NDK_LCACHE')

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionName version
        project.archivesBaseName = "realm-android-library"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                if (project.ccachePath) arguments "-DNDK_CCACHE=$project.ccachePath"
                if (project.lcachePath) arguments "-DNDK_LCACHE=$project.lcachePath"
                if (project.hasProperty('buildTargetABIs') && !project.getProperty('buildTargetABIs').trim().isEmpty()) {
                    abiFilters(*project.getProperty('buildTargetABIs').trim().split('\\s*,\\s*'))
                } else {
                    // "armeabi" and "mips" are no longer supported by the NDK
                    abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                }

                arguments "-DREALM_JAVA_BUILD_CORE_FROM_SOURCE=${project.hasProperty('buildCore') && project.getProperty('buildCore').toBoolean()}"
                arguments "-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${!project.hasProperty('enableLTO') || project.getProperty('enableLTO').toBoolean()}"
                targets "realm-jni"
            }
        }

        buildTypes {
            debug {
                javaCompileOptions {
                    annotationProcessorOptions {
                        arguments += ['realm.suppressWarnings': 'false']
                    }
                }
            }
        }
    }

    ndkVersion = project.findProperty('ndkVersion')

    externalNativeBuild {
        cmake {
            version = properties.getProperty('CMAKE')
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            // FIXME: If enabled, crashes with https://issuetracker.google.com/issues/37116868
            testCoverageEnabled = false
            // minifyEnabled = true;
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            externalNativeBuild {
                cmake {
                }
            }
            // minifyEnabled = true;
        }
    }

    sourceSets {
        testObjectServer {
            java.srcDirs += ['src/testObjectServer/kotlin']
        }
        androidTest {
            java.srcDirs += ['src/androidTest/kotlin', 'src/testUtils/java', 'src/testUtils/kotlin']
        }
        androidTestObjectServer {
            java.srcDirs += [/* FIXME 'src/syncIntegrationTest/java', */
                             'src/syncIntegrationTest/kotlin',
                             'src/androidTestObjectServer/kotlin', 'src/syncTestUtils/java'
                             , 'src/syncTestUtils/kotlin']
            assets.srcDirs += ['src/syncIntegrationTest/assets/']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        // We did strip with cmake for release build.
        // Please, Gradle, you are not that smart! Pleas DO NOT strip debug symbols for debug build!
        doNotStrip "*/*/*.so"
    }

    lintOptions {
        abortOnError false
    }

    flavorDimensions 'api'

    productFlavors {
        base {
            dimension 'api'
            externalNativeBuild {
                cmake {
                    arguments "-DREALM_FLAVOR=base"
                }
            }
            consumerProguardFiles 'proguard-rules-consumer-common.pro', 'proguard-rules-consumer-base.pro'
            proguardFiles 'proguard-rules-build-common.pro'
        }
        objectServer {
            dimension 'api'
            externalNativeBuild {
                cmake {
                    arguments "-DREALM_FLAVOR=objectServer"
                }
            }
            consumerProguardFiles 'proguard-rules-consumer-common.pro', 'proguard-rules-consumer-objectServer.pro'
            proguardFiles 'proguard-rules-build-common.pro', 'proguard-rules-build-objectServer.pro'
        }
    }
}


project.afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Werror'
    }

    tasks.all { task ->
        android.productFlavors.all { flavor ->
            if (task.name == "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal") {
                task.dependsOn "assemble${flavor.name.capitalize()}"
            }
        }
    }
}

// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-1-50-is-out/
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

coveralls.jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"

android.registerTransform(new io.realm.transformer.RealmTransformer(project))
android.registerTransform(new io.realm.buildtransformer.RealmBuildTransformer(
        "base",
        "io.realm.internal.annotations.ObjectServer",
        [
            "io_realm_sync_permissions_ClassPermissionsRealmProxyInterface.class",
            "io_realm_sync_permissions_PermissionRealmProxyInterface.class",
            "io_realm_sync_permissions_PermissionUserRealmProxyInterface.class",
            "io_realm_sync_permissions_RealmPermissionsRealmProxyInterface.class",
            "io_realm_sync_permissions_RoleRealmProxyInterface.class"
        ].toSet()
))

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    compileOnly "io.reactivex.rxjava2:rxjava:${properties.getProperty('RXJAVA_DEPENDENCY')}"
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.1.2'
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    api "io.realm:realm-annotations:${version}"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.getkeepsafe.relinker:relinker:1.4.3'
    api "org.mongodb:bson:${properties.getProperty('BSON_DEPENDENCY')}"
    implementation("io.reactivex.rxjava2:rxandroid:${properties.getProperty('RXANDROID_DEPENDENCY')}") {
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }

    androidTestImplementation "androidx.multidex:multidex:2.0.1"

    kapt project(':realm-annotations-processor') // See https://github.com/realm/realm-java/issues/5799
    objectServerImplementation 'com.squareup.okhttp3:okhttp:3.12.0' // Going above this requires minSDK 21
    kaptAndroidTest project(':realm-annotations-processor')
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "io.reactivex.rxjava2:rxjava:${properties.getProperty('RXJAVA_DEPENDENCY')}"
    androidTestImplementation "io.reactivex.rxjava2:rxandroid:${properties.getProperty('RXANDROID_DEPENDENCY')}"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    androidTestImplementation "org.skyscreamer:jsonassert:1.5.0"
    androidTestImplementation project(':kotlin-extensions')

    // specify error prone version to prevent sudden failure
    errorprone 'com.google.errorprone:error_prone_core:2.1.2'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.objectServer.java.srcDirs
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

def betaTag = 'Beta:a:<div style="border-style:solid;border-width:2px">This software is considered in beta phase. ' +
        'It indicates that any public interface can change without prior announcements. ' +
        'Moreover, classes, constructors, and methods annotated as beta are not ' +
        'considered at production quality, and should be used with care.</div>'

task javadoc(type: Javadoc) {
    source android.sourceSets.objectServer.java.srcDirs
    source android.sourceSets.main.java.srcDirs
    source "../../realm-annotations/src/main/java"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        title = "Realm ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        overview = 'src/overview.html'

        links "https://docs.oracle.com/javase/7/docs/api/"
        links "http://reactivex.io/RxJava/javadoc/"
        // TODO We probably need to add the bson.jar to the classpath for these to work
        links "https://www.javadoc.io/doc/org.mongodb/bson/${properties.getProperty('BSON_DEPENDENCY')}/"
        linksOffline "https://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"

        tags = [betaTag]
    }
    exclude '**/internal/**'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/*.kt'
    doLast {
        copy {
            from "src/realm-java-overview.png"
            into "$buildDir/docs/javadoc"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// See https://spotbugs-gradle-plugin.netlify.app/com/github/spotbugs/snom/spotbugsextension
spotbugs {
    toolVersion = '4.1.1'
    ignoreFailures = false
    effort = "default"
    reportLevel = "medium"
    excludeFilter = file("${projectDir}/../config/findbugs/findbugs-filter.xml")
}

// See https://spotbugs.readthedocs.io/en/latest/migration.html#findbugs-gradle-plugin
task spotbugsMain(type: com.github.spotbugs.snom.SpotBugsTask) {
    dependsOn 'assemble'
    group = 'verification'
    classes = fileTree("build/intermediates/javac/")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {
    group = 'verification'

    source = fileTree('src/main/java') + fileTree('src/objectServer/java')
    ruleSetFiles = files("${projectDir}/../config/pmd/ruleset.xml")

    ruleSets = []

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Configure Checkstyle
// Android sourceSets are not sourceSets, so we can't confgure this with the DSL.
task checkstyle(type: Checkstyle) {
    group = 'verification'
    configFile file("${projectDir}/../config/checkstyle/checkstyle.xml")

    source fileTree('src/main/java') + fileTree('src/objectServer/java')
    include '**/*.java'
    exclude '**/gen/**'

    // empty classpath
    classpath = files()

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

apply from: "${rootDir}/../mavencentral-publish.gradle"

publishing {
    publications {
        basePublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-library'
            version project.version
            artifact file("${rootDir}/realm-library/build/outputs/aar/realm-android-library-base-release.aar")
            artifact sourcesJar
            artifact javadocJar
            populatePom(
                    it,
                    'realm-android-library',
                    'Realm is a mobile database: Build better apps, faster.',
                    createPomDependencies(["baseImplementation", "implementation", "baseApi", "api"])
            )
        }

        objectServerPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-library-object-server'
            version project.version
            artifact file("${rootDir}/realm-library/build/outputs/aar/realm-android-library-objectServer-release.aar")
            artifact sourcesJar
            artifact javadocJar
            populatePom(
                    it,
                    'realm-android-library-object-server',
                    'Realm is a mobile database: Build better apps, faster.',
                    createPomDependencies(["objectServerImplementation", "implementation", "objectServerApi", "api"])
            )
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishToMavenLocal.dependsOn assemble

if (project.hasProperty('dontCleanJniFiles')) {
    project.afterEvaluate {
        tasks.all { task ->
            if (task.name.startsWith('externalNativeBuildClean')) {
                task.enabled = false
            }
        }
    }
} else {
    task cleanExternalBuildFiles(type: Delete) {
        delete project.file('.externalNativeBuild')
        delete project.file('.cxx')
        // Clean .so files that were created by old build script (realm/realm-jni/build.gradle).
        delete project.file('src/main/jniLibs')
    }
    clean.dependsOn cleanExternalBuildFiles
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        if (project.hasProperty('buildTargetABIs') && project.getProperty('buildTargetABIs').trim().isEmpty()) {
            variant.externalNativeBuildProviders[0].configure {
                enabled = false
            }
        }

        // all Java files must be compiled before native build
        // See https://github.com/android/ndk-samples/issues/284
        android.libraryVariants.all { anotherVariant ->
            if (variant.flavorName == anotherVariant.flavorName) {
                variant.externalNativeBuildProviders[0].configure {
                    dependsOn "compile${anotherVariant.name.capitalize()}JavaWithJavac"
                }
            }
        }
        // as of android gradle plugin 3.0.0-alpha5, generateJsonModel* triggers native build. Java files must be compiled before them.
        android.buildTypes.all { buildType ->
            tasks["generateJsonModel${variant.name.capitalize()}"].dependsOn "compile${variant.flavorName.capitalize()}${buildType.name.capitalize()}JavaWithJavac"
        }
    }
}

static def getValueFromPropertiesFile(File propFile, String key) {
    if (!propFile.isFile() || !propFile.canRead()) {
        return null
    }
    def prop = new Properties()
    def reader = propFile.newReader()
    try {
        prop.load(reader)
    } finally {
        reader.close()
    }
    return prop.get(key)
}
