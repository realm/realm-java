import java.security.MessageDigest

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'de.undercouch.download'

ext.coreVersion = '2.0.0-rc7'
// empty or comment out this to disable hash checking
ext.coreSha256Hash = '5707af75cd3624505d687c5fa31ccb6a61fe754f72ff6c79d98a342af3b9942b'
ext.forceDownloadCore =
        project.hasProperty('forceDownloadCore') ? project.getProperty('forceDownloadCore').toBoolean() : false
// Set the core source code path. By setting this, the core will be built from source. And coreVersion will be read from
// core source code.
ext.coreSourcePath = project.hasProperty('coreSourcePath') ? project.getProperty('coreSourcePath') : null
// The location of core archive.
ext.coreArchiveDir = System.getenv("REALM_CORE_DOWNLOAD_DIR")
if (!ext.coreArchiveDir) {
    ext.coreArchiveDir = ".."
}
ext.coreArchiveFile = rootProject.file("${ext.coreArchiveDir}/core-android-${project.coreVersion}.tar.gz")
ext.coreDistributionDir = file("${projectDir}/distribution/realm-core/")
ext.coreDir = file("${project.coreDistributionDir.getAbsolutePath()}/core-${project.coreVersion}")

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 24
        project.archivesBaseName = "realm-android-library"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DREALM_CORE_DIST_DIR:STRING=${project.coreDir.getAbsolutePath()}",
                          // FIXME:
                          // This is copied from https://dl.google.com/android/repository/cmake-3.4.2909474-linux-x86_64.zip
                          // because of the android.toolchain.cmake shipped with Android SDK CMake 3.6 doesn't work with our
                          // JNI build currently (lack of lto linking support).
                          // This file should be removed and use the one from Android SDK cmake package when it supports lto.
                        "-DCMAKE_TOOLCHAIN_FILE=${project.file('src/main/cpp/android.toolchain.cmake').path}"
                if (!project.hasProperty('android.injected.build.abi') && project.hasProperty('buildTargetABIs')) {
                    abiFilters(*project.getProperty('buildTargetABIs').trim().split('\\s*,\\s*'))
                } else {
                    // armeabi is not supported anymore.
                    abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a', 'mips'
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    sourceSets {
        androidTest {
            java.srcDirs += 'src/benchmarks/java'
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    lintOptions {
        abortOnError false
    }
}


coveralls.jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"

import io.realm.transformer.RealmTransformer

android.registerTransform(new RealmTransformer())

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    provided 'io.reactivex:rxjava:1.1.0'
    compile "io.realm:realm-annotations:${version}"
    compile 'com.getkeepsafe.relinker:relinker:1.2.1'

    androidTestCompile 'io.reactivex:rxjava:1.1.0'
    androidTestCompile 'com.android.support:support-annotations:24.0.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.opencsv:opencsv:3.4'
    androidTestCompile 'dk.ilios:spanner:0.6.0'

    androidTestApt project(':realm-annotations-processor')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source android.sourceSets.main.java.srcDirs
    source "../../realm-annotations/src/main/java"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        title = "Realm ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        overview = 'src/overview.html'

        links "https://docs.oracle.com/javase/7/docs/api/"
        links "http://reactivex.io/RxJava/javadoc/"
        linksOffline "https://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"
    }
    exclude '**/internal/**'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    doLast {
        copy {
            from "src/realm-java-overview.png"
            into "$buildDir/docs/javadoc"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task findbugs(type: FindBugs) {
    dependsOn assemble
    group = 'Verification'

    ignoreFailures = false
    effort = "default"
    reportLevel = "medium"
    excludeFilter = file("${projectDir}/../config/findbugs/findbugs-filter.xml")
    classes = files("${projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/findbugs/findbugs-output.xml"
        }
        html {
            destination "$project.buildDir/findbugs/findbugs-output.html"
        }
    }
}

task pmd(type: Pmd) {
    group = 'Verification'

    source = fileTree('src/main/java')
    ruleSetFiles = files("${projectDir}/../config/pmd/ruleset.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task checkstyle(type: Checkstyle) {
    group = 'Test'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    configFile = file("${projectDir}/../config/checkstyle/checkstyle.xml")

    // empty classpath
    classpath = files()
}

// Configuration options can be found here:
// http://developer.android.com/reference/android/support/test/runner/AndroidJUnitRunner.html
task connectedBenchmarks(type: GradleBuild) {
    description =  'Run all benchmarks on connected devices'
    group = 'Verification'
    buildFile = file("${projectDir}/build.gradle")
    startParameter.getProjectProperties().put('android.testInstrumentationRunnerArguments.package', 'io.realm.benchmarks')
    tasks = ['connectedCheck']
}

task connectedUnitTests(type: GradleBuild) {
    description =  'Run all unit tests on connected devices'
    group = 'Verification'
    buildFile = file("${projectDir}/build.gradle")
    startParameter.getProjectProperties().put('android.testInstrumentationRunnerArguments.notPackage', 'io.realm.benchmarks')
    tasks = ['connectedAndroidTest']
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'realm-android-library'
                description 'Realm is a mobile database: a replacement for SQLite & ORMs.'
                url 'http://realm.io'

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                issueManagement {
                    system 'github'
                    url 'https://github.com/realm/realm-java/issues'
                }
                scm {
                    url 'scm:https://github.com/realm/realm-java'
                    connection 'scm:git@github.com:realm/realm-java.git'
                    developerConnection 'scm:git@github.com:realm/realm-java.git'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'

    dryRun = false
    publish = false

    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = 'realm-android-library'
        desc = 'Realm for Android'
        websiteUrl = 'http://realm.io'
        issueTrackerUrl = 'https://github.com/realm/realm-java/issues'
        vcsUrl = 'https://github.com/realm/realm-java.git'
        licenses = ['Apache-2.0']
        labels = ['android', 'realm']
        publicDownloadNumbers = false
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
            maven = true
        }
        defaults {
            publishConfigs('archives')
            publishPom = true
            publishIvy = false
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


def coreDownloaded = false

task downloadCore(group: 'build setup', description: 'Download the latest version of Realm Core') {
    def isHashCheckingEnabled = {
        return project.hasProperty('coreSha256Hash') && !project.coreSha256Hash.empty
    }

    def calcSha256Hash = {File targetFile ->
        MessageDigest sha = MessageDigest.getInstance("SHA-256");
        Formatter hexHash = new Formatter()
        sha.digest(targetFile.bytes).each { b -> hexHash.format('%02x', b) }
        return hexHash.toString()
    }

    def shouldDownloadCore = {
        if (!project.coreArchiveFile.exists()) {
            return true
        }
        if (project.forceDownloadCore) {
            return true;
        }
        if (!isHashCheckingEnabled()) {
            println "Skipping hash check(empty \'coreSha256Hash\')."
            return false
        }

        def calculatedHash = calcSha256Hash(project.coreArchiveFile)
        if (project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
            return false
        }

        println "Existing archive hash mismatch (Expected: ${project.coreSha256Hash.toLowerCase()}" +
                " but got ${calculatedHash.toLowerCase()}). Download new version."
        return true
    }

    doLast {
        if (shouldDownloadCore()) {
            download {
                src "http://static.realm.io/downloads/core/realm-core-android-${project.coreVersion}.tar.gz"
                dest project.coreArchiveFile
                onlyIfNewer false
            }
            coreDownloaded = true

            if (isHashCheckingEnabled()) {
                def calculatedHash = calcSha256Hash(project.coreArchiveFile)
                if (!project.coreSha256Hash.equalsIgnoreCase(calculatedHash)) {
                    throw new GradleException("Invalid checksum for file '" +
                            "${project.coreArchiveFile.getName()}'. Expected " +
                            "${project.coreSha256Hash.toLowerCase()} but got " +
                            "${calculatedHash.toLowerCase()}.");
                }
            } else {
                println 'Skipping hash check (empty \'coreSha256Hash\').'
            }
        }
    }
}

task compileCore(group: 'build setup', description: 'Compile the core library from source code') {
    // Build the library from core source code
    doFirst {
        if (!coreSourcePath) {
            throw new GradleException('The coreSourcePath is not set.')
        }
        exec {
            workingDir = coreSourcePath
            commandLine = [
                    "bash",
                    "build.sh",
                    "build-android"
            ]
        }
    }

    // Copy the core tar ball
    doLast {
        copy {
            from "${coreSourcePath}/realm-core-android-${coreVersion}.tar.gz"
            into project.coreArchiveFile.parent
            rename "realm-core-android-${coreVersion}.tar.gz", "core-android-${coreVersion}.tar.gz"
        }
    }
}

task deployCore(group: 'build setup', description: 'Deploy the latest version of Realm Core') {
    dependsOn {
        coreSourcePath ? compileCore : downloadCore
    }

    outputs.upToDateWhen {
        // Clean up the coreDir if it is newly downloaded or compiled from source
        if (coreDownloaded || coreSourcePath) {
            return false
        }

        return project.coreDir.exists()
    }

    doLast {
        // Delete all files to avoid multiple copies of the same header file in Android Studio.
        exec {
            commandLine = [
                    'rm',
                    '-rf',
                    project.coreDistributionDir.getAbsolutePath()
            ]
        }
        copy {
            from tarTree(project.coreArchiveFile)
            into project.coreDir
        }
    }
}

preBuild.dependsOn deployCore

if (project.hasProperty('dontCleanJniFiles')) {
    project.afterEvaluate {
        tasks.all { task ->
            if (task.name.startsWith('externalNativeBuildClean')) {
                task.enabled = false
            }
        }
    }
} else {
    task cleanJniHeaders(type: Delete) {
        delete project.file('src/main/cpp/jni_include')
    }
    clean.dependsOn cleanJniHeaders

    task cleanExternalBuildFiles(type: Delete) {
        delete project.file('.externalNativeBuild')
    }
    clean.dependsOn cleanExternalBuildFiles
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.externalNativeBuildTasks[0].dependsOn(checkNdk)
    }
}

task checkNdk() << {
    def ndkPathInEnvVariable = System.env.ANDROID_NDK_HOME
    if (!ndkPathInEnvVariable) {
        throw new GradleException("The environment variable 'ANDROID_NDK_HOME' must be set.")
    }
    checkNdk(ndkPathInEnvVariable)

    def localPropFile = rootProject.file('local.properties')
    if (!localPropFile.exists()) {
        // we can skip the checks since 'ANDROID_NDK_HOME' will be used instead.
    } else {
        def String ndkPathInLocalProperties = getValueFromPropertiesFile(localPropFile, 'ndk.dir')
        if (!ndkPathInLocalProperties) {
            throw new GradleException("'ndk.dir' must be set in ${localPropFile.getAbsolutePath()}.")
        }
        checkNdk(ndkPathInLocalProperties)
        if (new File(ndkPathInLocalProperties).getCanonicalPath()
                != new File(ndkPathInEnvVariable).getCanonicalPath()) {
            throw new GradleException(
                    "The value of environment variable 'ANDROID_NDK_HOME' (${ndkPathInEnvVariable}) and"
                            + " 'ndk.dir' in 'local.properties' (${ndkPathInLocalProperties}) "
                            + ' must point the same directory.')
        }
    }
}

def checkNdk(String ndkPath) {
    def detectedNdkVersion
    def releaseFile = new File(ndkPath, 'RELEASE.TXT')
    def propertyFile = new File(ndkPath, 'source.properties')
    if (releaseFile.isFile()) {
        detectedNdkVersion = releaseFile.text.trim().split()[0].split('-')[0]
    } else if (propertyFile.isFile()) {
        detectedNdkVersion = getValueFromPropertiesFile(propertyFile, 'Pkg.Revision')
        if (detectedNdkVersion == null) {
            throw new GradleException("Failed to obtain the NDK version information from ${ndkPath}/source.properties")
        }
    } else {
        throw new GradleException("Neither ${releaseFile.getAbsolutePath()} nor ${propertyFile.getAbsolutePath()} is a file.")
    }
    if (detectedNdkVersion != project.ndkVersion) {
        throw new GradleException("Your NDK version: ${detectedNdkVersion}."
                +" Realm JNI must be compiled with the version ${project.ndkVersion} of NDK.")
    }
}

def getValueFromPropertiesFile(File propFile, String key) {
    if (!propFile.isFile() || !propFile.canRead()) {
        return null
    }
    def prop = new Properties()
    def reader = propFile.newReader()
    try {
        prop.load(reader)
    } finally {
        reader.close()
    }
    return prop.get(key)
}
