apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.jetbrains.dokka'

// TODO How many of these work on Kotlin?
//apply plugin: 'findbugs'
//apply plugin: 'pmd'
//apply plugin: 'checkstyle'
//apply plugin: 'com.github.kt3k.coveralls'
//apply plugin: 'net.ltgt.errorprone'

android.registerTransform(new io.realm.transformer.RealmTransformer(project))

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionName version
        project.archivesBaseName = "realm-kotlin-extensions"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            // https://youtrack.jetbrains.com/issue/KT-11333
            // Until this is resolved, enabling code coverage will break extension functions
            // during instrumentation testing.
            testCoverageEnabled = false
        }
        release {
            minifyEnabled false
        }
    }

    flavorDimensions 'api'

    productFlavors {
        base {
            dimension 'api'
        }
//        objectServer {
//            dimension 'api'
//        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += ['src/androidTest/kotlin', '../realm-library/src/testUtils/java']
//        objectServer.java.srcDirs += 'src/objectServer/kotlin'
//        androidTestObjectServer.java.srcDirs += [
//                'src/androidTestObjectServer/kotlin',
//                '../realm-library/src/testUtils/java',
//                '../realm-library/src/testUtils/kotlin',
//                '../realm-library/src/syncTestUtils/java',
//        ]
    }

    // Required from Kotlin 1.1.2
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation project(':realm-library')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    kaptAndroidTest project(':realm-annotations-processor')
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
//    androidTestObjectServerImplementation 'com.squareup.okhttp3:okhttp:3.9.0'
//    androidTestObjectServerImplementation 'io.reactivex.rxjava2:rxjava:2.1.5'
//    androidTestObjectServerImplementation 'com.google.code.findbugs:jsr305:3.0.2'
}

repositories {
    mavenCentral()
}

// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-1-50-is-out/
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}


task sourcesJar(type: Jar) {
//    from android.sourceSets.objectServer.java.srcDirs
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

dokka {
    // TODO Filtering is currently not possible https://youtrack.jetbrains.com/issue/KT-21022
    // This means we cannot filter R/BuildConfig files for the time being
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/dokka"
}

// Deployment

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'realm-kotlin-extensions'
                description 'Kotlin specific APIs and extension functions for Realm for Android'
                url 'http://realm.io'

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                issueManagement {
                    system 'github'
                    url 'https://github.com/realm/realm-java/issues'
                }
                scm {
                    url 'scm:https://github.com/realm/realm-java'
                    connection 'scm:git@github.com:realm/realm-java.git'
                    developerConnection 'scm:git@github.com:realm/realm-java.git'
                }
            }
        }
    }
}

// The publications doesn't know about our AAR dependencies, so we have to manually add them to the pom
// Credit: http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
def createPomDependencies(configurationNames) {
    return {
        def dependenciesNode = asNode().appendNode('dependencies')
        configurationNames.each { configurationName ->
            configurations[configurationName].allDependencies.each {
                if (it.group != null && it.name != null && it.name != 'realm-library') {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)

                    //If there are any exclusions in dependency
                    if (it.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        it.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        basePublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-kotlin-extensions'
            version project.version
            artifact file("${rootDir}/kotlin-extensions/build/outputs/aar/realm-kotlin-extensions-base-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom.withXml(createPomDependencies(["baseImplementation", "implementation", "baseApi", "api"]))
        }

//        objectServerPublication(MavenPublication) {
//            groupId 'io.realm'
//            artifactId 'realm-android-kotlin-extensions-object-server'
//            version project.version
//            artifact file("${rootDir}/kotlin-extensions/build/outputs/aar/realm-kotlin-extensions-objectServer-release.aar")
//            artifact sourcesJar
//            artifact javadocJar
//
//            pom.withXml(createPomDependencies(["objectServerImplementation", "implementation", "objectServerApi", "api"]))
//        }
    }
    repositories {
        maven {
            credentials(AwsCredentials) {
                accessKey project.hasProperty('s3AccessKey') ? s3AccessKey : 'noAccessKey'
                secretKey project.hasProperty('s3SecretKey') ? s3SecretKey : 'noSecretKey'
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "s3://realm-ci-artifacts/maven/snapshots/"
            } else {
                url "s3://realm-ci-artifacts/maven/releases/"
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        }
        defaults {
            publications('basePublication'/*, 'objectServerPublication'*/)
            publishPom = true
            publishIvy = false
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishToMavenLocal.dependsOn assemble

android.productFlavors.all { flavor ->
    def librarySuffix = flavor.name == 'base' ? '' : '-object-server'
    def userName = project.findProperty('bintrayUser') ?: 'noUser'
    def accessKey = project.findProperty('bintrayKey') ?: 'noKey'
    def artifactId = "realm-android-kotlin-extensions${librarySuffix}"

    // BINTRAY

    task("bintrayAar${flavor.name.capitalize()}", type: Exec) {
        dependsOn "assemble${flavor.name.capitalize()}"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/outputs/aar/realm-kotlin-extensions-${flavor.name}-release.aar",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.aar?publish=0"
    }

    task("bintraySources${flavor.name.capitalize()}", type: Exec) {
        dependsOn sourcesJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-sources.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-sources.jar?publish=0"
    }

    task("bintrayJavadoc${flavor.name.capitalize()}", type: Exec) {
        dependsOn javadocJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-javadoc.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-javadoc.jar?publish=0"
    }

    task("bintrayPom${flavor.name.capitalize()}", type: Exec) {
        dependsOn "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
                '-u',
                "${userName}:${accessKey}",
                "https://api.bintray.com/content/realm/maven/${artifactId}/${project.version}/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.pom?publish=0"
    }

    // OJO

    task("ojoAar${flavor.name.capitalize()}", type: Exec) {
        dependsOn "assemble${flavor.name.capitalize()}"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/outputs/aar/realm-kotlin-extensions-${flavor.name}-release.aar",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.aar?publish=0"
    }

    task("ojoSources${flavor.name.capitalize()}", type: Exec) {
        dependsOn sourcesJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-sources.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-sources.jar?publish=0"
    }

    task("ojoJavadoc${flavor.name.capitalize()}", type: Exec) {
        dependsOn javadocJar
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/libs/realm-kotlin-extensions-${project.version}-javadoc.jar",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}-javadoc.jar?publish=0"
    }

    task("ojoPom${flavor.name.capitalize()}", type: Exec) {
        dependsOn "publish${flavor.name.capitalize()}PublicationPublicationToMavenLocal"
        group = 'Publishing'
        commandLine 'curl',
                '-X',
                'PUT',
                '-T',
                "${buildDir}/publications/${flavor.name}Publication/pom-default.xml",
                '-u',
                "${userName}:${accessKey}",
                "https://oss.jfrog.org/artifactory/oss-snapshot-local/io/realm/${artifactId}/${project.version}/${artifactId}-${project.version}.pom?publish=0"
    }

    task("bintray${flavor.name.capitalize()}") {
        dependsOn "bintrayAar${flavor.name.capitalize()}"
        dependsOn "bintraySources${flavor.name.capitalize()}"
        dependsOn "bintrayJavadoc${flavor.name.capitalize()}"
        dependsOn "bintrayPom${flavor.name.capitalize()}"
        group = 'Publishing'
    }

    task("ojo${flavor.name.capitalize()}") {
        dependsOn "ojoAar${flavor.name.capitalize()}"
        dependsOn "ojoSources${flavor.name.capitalize()}"
        dependsOn "ojoJavadoc${flavor.name.capitalize()}"
        dependsOn "ojoPom${flavor.name.capitalize()}"
        group = 'Publishing'
    }
}

// Cannot override bintrayUpload in Gradle 4.9. Most likely due to a bug in
// the gradle-bintray-plugin. So we use `bintrayUploadAll` instead that can
// then depend on the original bintrayUpload task.
task bintrayUploadAll() {
    group = 'Publishing'
}

project.afterEvaluate {
    android.productFlavors.all { flavor ->
        bintrayUploadAll.dependsOn "bintray${flavor.name.capitalize()}"
    }
}

task ojoUpload() {
    android.productFlavors.all { flavor ->
        dependsOn "ojo${flavor.name.capitalize()}"
    }
    group = 'Publishing'
}
