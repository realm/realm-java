apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.jetbrains.dokka'

// TODO How many of these work on Kotlin?
//apply plugin: 'findbugs'
//apply plugin: 'pmd'
//apply plugin: 'checkstyle'
//apply plugin: 'com.github.kt3k.coveralls'
//apply plugin: 'net.ltgt.errorprone'

def properties = new Properties()
properties.load(new FileInputStream("${projectDir}/../../dependencies.list"))

android.registerTransform(new io.realm.transformer.RealmTransformer(project))

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        versionName version
        multiDexEnabled true
        project.archivesBaseName = "realm-kotlin-extensions"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            // https://youtrack.jetbrains.com/issue/KT-11333
            // Until this is resolved, enabling code coverage will break extension functions
            // during instrumentation testing.
            testCoverageEnabled = false
        }
        release {
            minifyEnabled false
        }
    }

    flavorDimensions 'api'

    productFlavors {
        base {
            dimension 'api'
        }
        objectServer {
            dimension 'api'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += [
                'src/androidTest/kotlin',
                '../realm-library/src/testUtils/java',
                '../realm-library/src/testUtils/kotlin'
        ]
        objectServer.java.srcDirs += 'src/objectServer/kotlin'
        androidTestObjectServer.java.srcDirs += [
                'src/androidTestObjectServer/kotlin',
                '../realm-library/src/testUtils/java',
                '../realm-library/src/testUtils/kotlin',
                '../realm-library/src/syncTestUtils/java',
                '../realm-library/src/syncTestUtils/kotlin',
        ]
    }

    packagingOptions {
         exclude "META-INF/AL2.0"
         exclude "META-INF/LGPL2.1"
    }

    // Required from Kotlin 1.1.2
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation project(':realm-library')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_android_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation "org.mongodb:bson:${properties.getProperty('BSON_DEPENDENCY')}"
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    kaptAndroidTest project(':realm-annotations-processor')
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    androidTestObjectServerImplementation 'com.squareup.okhttp3:okhttp:3.9.0'
    androidTestObjectServerImplementation "io.reactivex.rxjava2:rxjava:${properties.getProperty('RXJAVA_DEPENDENCY')}"
}

repositories {
    mavenCentral()
}

// enable @ParametersAreNonnullByDefault annotation. See https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-1-50-is-out/
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.objectServer.java.srcDirs
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/docs"
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/dokka"
}

apply from: "${rootDir}/../mavencentral-publications.gradle"

publishing {
    publications {
        basePublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-kotlin-extensions'
            version project.version
            artifact (file("${rootDir}/kotlin-extensions/build/outputs/aar/realm-kotlin-extensions-base-release.aar")) {
                builtBy assemble
            }
            artifact sourcesJar
            artifact javadocJar
            populatePom(
                    it,
                    'realm-android-kotlin-extensions',
                    'Kotlin specific APIs and extension functions for Realm for Android',
                    createPomDependencies(["baseImplementation", "implementation", "baseApi", "api"])
            )
        }

        objectServerPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android-kotlin-extensions-object-server'
            version project.version
            artifact (file("${rootDir}/kotlin-extensions/build/outputs/aar/realm-kotlin-extensions-objectServer-release.aar")) {
                builtBy assemble
            }
            artifact sourcesJar
            artifact javadocJar
            populatePom(
                    it,
                    'realm-android-kotlin-extensions-object-server',
                    'Kotlin specific APIs and extension functions for Realm for Android',
                    createPomDependencies(["objectServerImplementation", "implementation", "objectServerApi", "api"])
            )
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishToMavenLocal.dependsOn assemble
