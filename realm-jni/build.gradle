ext.coreVersion = '0.91.2'
ext.clang = false // gcc is default for the NDK. It also produces smaller binaries

def commonCflags = [ '-std=c++11', '-ffunction-sections', '-fdata-sections', '-flto' ]

enum Compiler {
    GCC, CLANG
}

// Unfortunately the NDK has no consistency when it comes to naming.
// This Class holds all the different names used and some more informations
class Toolchain {
    // The standard name: arm, arm64, mips, x86
    String name

    // The name used when generating the standalone toolchain
    String fullName

    // The prefix commands use. i.e. arm-linux-androideabi-gcc
    String commandPrefix

    // Which version of each compiler to use
    Map<Compiler, String> version

    // The first Android platform to support this toolchain
    int platform
}

// This class describes the specific target
class Target {
    // The name of the target. This is used for the task names
    String name

    // The name of the folder the Android Gradle plugin expects to find the shared library
    String jniFolder

    // The toolchain associated to this target
    Toolchain toolchain

    // The CFLAGS specific to this target
    List<String> cflags
}

// We are using gcc 4.8 for 32 bits targets and 4.9 for 64 bits targets, as the NDK defaults.
def toolchains = [
    new Toolchain( name:'arm', fullName:'arm-linux-androideabi', commandPrefix:'arm-linux-androideabi', version:[ (Compiler.GCC):'4.8', (Compiler.CLANG):'3.5' ], platform:8 ),
    new Toolchain( name:'arm64', fullName:'aarch64-linux-android', commandPrefix:'aarch64-linux-android', version:[ (Compiler.GCC):'4.9', (Compiler.CLANG):'3.5' ], platform:21 ),
    new Toolchain( name:'mips', fullName:'mipsel-linux-android', commandPrefix:'mipsel-linux-android', version:[ (Compiler.GCC):'4.8', (Compiler.CLANG):'3.5' ], platform:9 ),
    new Toolchain( name:'x86', fullName:'x86', commandPrefix:'i686-linux-android', version:[ (Compiler.GCC):'4.8', (Compiler.CLANG):'3.5' ], platform:9 )
]

def targets = [
    new Target( name:'arm', jniFolder:'armeabi', toolchain:toolchains.find{it.name == 'arm'}, cflags:[ '-mthumb' ] ),
    new Target( name:'arm-v7a', jniFolder:'armeabi-v7a', toolchain:toolchains.find{it.name == 'arm'}, cflags:[ '-mthumb', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=vfpv3-d16' ] ),
    new Target( name:'arm64', jniFolder:'arm64-v8a', toolchain:toolchains.find{it.name == 'arm64'}, cflags:[] ),
    new Target( name:'mips', jniFolder:'mips', toolchain:toolchains.find{it.name == 'mips'}, cflags:[] ),
    new Target( name:'x86', jniFolder:'x86', toolchain:toolchains.find{it.name == 'x86'}, cflags:[] )
]

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

apply plugin: 'download-task'

Properties localProperties = new Properties()
localProperties.load(new FileInputStream("${projectDir}/../local.properties"))
localProperties.entrySet().each() { entry ->
    project.ext[entry.getKey()] = localProperties.setProperty(entry.getKey(), entry.getValue())
}

task checkProperties(group: 'check', description: 'Check the user provided gradle.properties') << {
    if (!project.ext['ndk.dir']) {
        throw new GradleException('The ndkDir property in the gradle.properties file is not set.')
    } else if (project.ext['ndk.dir'].endsWith('/')) {
        throw new GradleException('The path provided in the ndkProperty in the gradle.properties ends with /')
    } else if (!file(project.ext['ndk.dir']).directory) {
        throw new GradleException('The path provided in the ndkDir property in the gradle.properties is not a folder.')
    } else if (!file(new File(project.ext['ndk.dir'], 'RELEASE.TXT')).file) {
        throw new GradleException('The path provided in the ndkDir property in the gradle.properties does not seem to be an Android NDK.')
    }
    if (project.ext.has('encryption') && project.ext['encryption'] == 'true') {
        project.coreVersion += '-encryption'
    }
}

// TODO: Split this task into smaller subtasks
task downloadCore(group: 'build setup', description: 'Download the latest version of realm core', dependsOn: checkProperties) {
    outputs.dir "../core-${project.coreVersion}"
    doLast {
        download {
            src "http://static.realm.io/downloads/core/android-${project.coreVersion}.tar.gz"
            dest new File(buildDir, "core-android-${project.coreVersion}.tar.gz")
            onlyIfNewer true
        }
        copy {
            from tarTree(new File(buildDir, "core-android-${project.coreVersion}.tar.gz"))
            into "../core-${project.coreVersion}"
        }
        for (target in targets) {
            exec {
                commandLine = [
                        'make',
                        '-C', "${projectDir}/src",
                        "BASE_DENOM=${target.name}",
                        'LIB_SUFFIX_SHARED=.so',
                        'clean'
                ]
            }
        }
        exec {
            commandLine = [
                    'rm',
                    '-rf',
                    "${projectDir}/build/*"
            ]
        }
    }
}

toolchains.each { toolchain ->
    task "generateNdkToolchain${toolchain.name.capitalize()}"(type: Exec) {
        group 'build setup'
        description "Generate the NDK standalone toolchain for the ${toolchain.name.capitalize()} platform"
        dependsOn { checkProperties }
        outputs.dir new File("${buildDir}/standalone-toolchains/${toolchain.name}")
        commandLine = [
            "bash",
            "${project.ext['ndk.dir']}/build/tools/make-standalone-toolchain.sh",
            "--platform=android-${toolchain.platform}",
            "--install-dir=${buildDir}/standalone-toolchains/${toolchain.name}",
            "--toolchain=${toolchain.fullName}-${clang?'clang'+toolchain.version[Compiler.CLANG]:toolchain.version[Compiler.GCC]}"
        ]
    }
}

targets.each { target ->
    task "buildAndroidJni${target.name.capitalize()}"(type: Exec) {
        group 'build'
        description "Build the Android JNI shared library for the ${target.name.capitalize()} platform"
        dependsOn downloadCore
        dependsOn "generateNdkToolchain${target.toolchain.name.capitalize()}"
        environment PATH: "${buildDir}/standalone-toolchains/${target.toolchain.name}/bin:${System.env.PATH}"
        environment CC: "${target.toolchain.commandPrefix}-${clang?'clang':'gcc'}"
        environment STRIP: "${target.toolchain.commandPrefix}-strip"
        environment REALM_ANDROID: '1'
        commandLine = [
            'make',
            '-C', "${projectDir}/src",
            "CC_IS=${clang?'clang':'gcc'}",
            "REALM_CFLAGS=-Wno-variadic-macros -DREALM_HAVE_CONFIG -DPIC -I${projectDir}/../core-${project.coreVersion}/include",
            "CFLAGS_ARCH=${(commonCflags + target.cflags).join(' ')}",
            "BASE_DENOM=${target.name}",
            "REALM_LDFLAGS=-lrealm-android-${target.name} -lstdc++ -lsupc++ -llog -L${projectDir}/../core-${project.coreVersion} -Wl,--gc-sections -flto",
            'LIB_SUFFIX_SHARED=.so',
            "librealm-jni-${target.name}.so"
        ]
    }

    task "copyAndroidJni${target.name.capitalize()}"(type: Copy) {
        dependsOn "buildAndroidJni${target.name.capitalize()}"
        from "${projectDir}/src/librealm-jni-${target.name}.so"
        into "${projectDir}/../realm/src/main/jniLibs/${target.jniFolder}"
        rename "librealm-jni-${target.name}.so", 'librealm-jni.so'
    }
}

task buildAndroidJni(group: 'build', description: 'Build the Android JNI shared library for all the supported platforms') {
    targets.each { target ->
        dependsOn "copyAndroidJni${target.name.capitalize()}"
    }
}

task clean(group: 'build', description: 'Clean the make artifacts') << {
    targets.each { target ->
        exec {
            commandLine = [
                'make',
                '-C', "${projectDir}/src",
                "BASE_DENOM=${target.name}",
                'LIB_SUFFIX_SHARED=.so',
                'clean'
            ]
        }
    }
    exec {
        commandLine = [
            'rm',
            '-rf',
            "${projectDir}/build/*"
        ]
    }
}
