buildscript {
    def properties = new Properties()
    properties.load(new FileInputStream("${projectDir}/../dependencies.list"))
    ext.kotlin_version = properties.get('KOTLIN')
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${properties.get('BUILD_INFO_EXTRACTOR_GRADLE')}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${properties.get('GRADLE_BINTRAY_PLUGIN')}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'

group = 'io.realm'
version = file("${projectDir}/../version.txt").text.trim()

def properties = new Properties()
properties.load(new FileInputStream("${projectDir}/../dependencies.list"))

def coreVersion = properties.getProperty('REALM_CORE')

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenLocal()
    google()
    jcenter()
}

configurations {
    provided
    compile.extendsFrom provided
}

// Include the generated Version file
sourceSets {
    main {
        compileClasspath += configurations.provided
        java.srcDirs += ['build/generated-src/main/java', 'src/main/kotlin']
    }
}

dependencies {
    compile gradleApi()
    compile "io.realm:realm-annotations:${version}"
    compileOnly "com.android.tools.build:gradle:${properties.get("GRADLE_BUILD_TOOLS")}"
    compileOnly 'com.android.tools.build:gradle:3.1.1'
    compile 'org.javassist:javassist:3.25.0-GA'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

    testCompile 'junit:junit:4.12'
}

// for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

task generateVersionClass(type: Copy) {
    from 'src/main/templates/Version.java'
    into 'build/generated-src/main/java/io/realm/transformer'
    filter(ReplaceTokens, tokens: [version: version, coreVersion: coreVersion])
    outputs.upToDateWhen { false }
}

compileJava.dependsOn generateVersionClass

def commonPom = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    issueManagement {
        system 'github'
        url 'https://github.com/realm/realm-java/issues'
    }
    scm {
        url 'scm:https://github.com/realm/realm-java'
        connection 'scm:git@github.com:realm/realm-java.git'
        developerConnection 'scm:git@github.com:realm/realm-java.git'
    }
}

publishing {
    publications {
        realmPublication(MavenPublication) {
            groupId 'io.realm'
            artifactId = 'realm-transformer'
            from components.java
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-transformer')
                root.appendNode('description', 'Android Gradle Transformer for Realm. Realm is a mobile database: a replacement for SQLite & ORMs')
                root.appendNode('url', 'http://realm.io')
                root.children().last() + commonPom
            }
        }
    }
    repositories {
        maven {
            credentials(AwsCredentials) {
                accessKey project.hasProperty('s3AccessKey') ? s3AccessKey : 'noAccessKey'
                secretKey project.hasProperty('s3SecretKey') ? s3SecretKey : 'noSecretKey'
            }
            if(project.version.endsWith('-SNAPSHOT')) {
                url "s3://realm-ci-artifacts/maven/snapshots/"
            } else {
                url "s3://realm-ci-artifacts/maven/releases/"
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'

    dryRun = false
    publish = false

    publications = ['realmPublication']
    pkg {
        repo = 'maven'
        name = 'realm-transformer'
        desc = 'Realm for Android'
        websiteUrl = 'http://realm.io'
        issueTrackerUrl = 'https://github.com/realm/realm-java/issues'
        vcsUrl = 'https://github.com/realm/realm-java.git'
        licenses = ['Apache-2.0']
        labels = ['android', 'realm']
        publicDownloadNumbers = false
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        }
        defaults {
            publications ('realmPublication')
        }
    }
}
