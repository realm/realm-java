#
# Java reference documentation for Shared Group class
#

ID         : class_shared_group
TITLE      : SharedGroup
SUMMARY    : *g_shared_group_summary
DESCR      : *g_shared_group_descr
SEE        : 
EXAMPLES: 
- DESCR    : 
  CODE     : ex_java_shared_group_intro
IGNORE     : []
CATEGORIES:
- Constructor:
  METHODS:
  - g_shared_group_constructor:
      NAMES    : SharedGroup
      SUMMARY  : *g_shared_group_constructor_summary
      DESCR    : >
                 Open a shared group (will be created if it does not already exist).

                 By default the shared group will be fully durable, so that each commit writes its changes
                 to disk in an atomic manner that guarantees that the file is always consistent.

#                 If your data is transient, and does not need to persist to disk (like for caching or
#                 shared state between processes). You can open the shared group in mem-only mode. Then the
#                 file will just be used for identification and backing and will be removed again when there
#                 are no more processes using it.
#
#                 Note that a shared group can only be opened in the mode it was created in.
#
#                 A SharedGroup may also be constructed in an unattached
#                 state (2). See open() and is_attached() for more on
#                 this.
      SIGNATURE: >
                 SharedGroup(String databaseFile)
#                 , bool no_create = false, DurabilityLevel dlevel);
#                 SharedGroup(unattached_tag);
      PARAMS:
      - NAME   : databaseFile
        TYPES  : String
        DESCR  : Filesystem path of the TightDB database file to be opened.
#      - NAME   : no_create
#        TYPES  : bool
#        DESCR  : If set to <tt>true</tt>, File::NotFound will be thrown
#                 if the file does not already exist.
#      - NAME   : dlevel
#        TYPES  : DurabilityLevel
#        DESCR  : Durability Level (durability_Full or durability_MemOnly)
      RETURN:
        TYPES  : SharedGroup
        DESCR  : A shared group.
      THROWS:
      - EXCEPT : IllegalArgument
        DESCR  : If the file could not be opened for whatever reason.
# TODO: more specific exceptions
      EXAMPLES:
      - CODE   : ex_java_shared_group_constructor_string
        DESCR  :
#- Utilities:
#  METHODS:
# ??? - g_shared_group_open:
# ??? - g_shared_group_is_attached:

#  - g_shared_group_has_changed:
#      NAMES    : hasChanged
#      SUMMARY  : *g_shared_group_has_changed_summary
#      DESCR    : *g_shared_group_has_changed_descr
#      RETURN:
#        TYPES  : boolean
#        DESCR  : <code>true</code> if it has changed, <code>false</code> otherwise.
#      EXAMPLES:
#      - CODE   : ex_java_shared_group_has_changed
#        DESCR  :
- Write transactions:
  METHODS:
  - g_shared_group_begin_write:
      NAMES    : beginWrite
      SUMMARY  : Initiate a write transaction.
      DESCR    : Creates a write transaction in order to begin writing to a shared group.
      RETURN:
        TYPES  : WriteTransaction
        DESCR  : A {@link class_write_transaction} object, which extends {@link class_group}
      EXAMPLES:
      - CODE   : ex_java_shared_group_begin_write
        DESCR  :
 
- Read transactions:
  METHODS:
  - g_shared_group_begin_read:
      NAMES    : beginRead
      SUMMARY  : Initiate a read transaction.
      DESCR    : Begin reading from a shared group.
      RETURN:
        TYPES  : ReadTransaction
        DESCR  : A {@link class_read_transaction} object, which extends {@link class_group}.
      EXAMPLES:
      - CODE   : ex_java_shared_group_begin_read
        DESCR  :

- Shared group:
  METHODS:
  - g_shared_group_has_changed:
      NAMES    : hasChanged
      SUMMARY  : *g_shared_group_has_changed_summary
      DESCR    : *g_shared_group_has_changed_descr
      RETURN:
        TYPES  : boolean
        DESCR  : <code>true</code> if it has changed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_java_shared_group_has_changed
        DESCR  :
