#
# Java reference documentation for Shared Group class
#

ID         : class_shared_group
TITLE      : SharedGroup
SUMMARY    : &g_shared_group_summary
             Sharing groups
DESCR      : &g_shared_group_descr
             This class enables you to shared tables across running applications.
SEE        : 
EXAMPLES: 
- DESCR    : 
  CODE     : ex_cpp_shared_group_intro
IGNORE     : []
CATEGORIES:
- Constructor:
  METHODS:
  - g_shared_group_constructor:
      NAMES    : SharedGroup
      SUMMARY  : &g_shared_group_constructor_summary
                 Create a shared group.
      DESCR    : &g_shared_group_constructor_descr
                 >
                 Database files can be shared across running applications.

                 When two threads or processes want to access the same
                 database file, they must each create their own
                 instance of SharedGroup.

                 If the database file does not already exist, it will
                 be created. When multiple threads are involved, it is
                 safe to let the first thread, that gets to it, create
                 the file.

                 While at least one instance of SharedGroup exists for
                 a specific database file, a lock file will exist
                 too. The lock file will be placed in the same
                 directory as the database file, and its name is
                 derived by adding the suffix '.lock' to the name of
                 the database file.

                 Processes that share a database file must reside on
                 the same host.
      PARAMS:                 
      - NAME   : path_to_database_file
        TYPES  : const char* 
        DESCR  : Path to a TightDB data file.
      - NAME   : replication_tag
        TYPES  : replication_tag
        DESCR  : ???
      RETURN:                 
        TYPES  : SharedGroup
        DESCR  : A shared group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_constructor
        DESCR  : 
- Utilities:
  METHODS:
  - g_shared_group_is_valid:
      NAMES    : is_valid
      SUMMARY  : &g_shared_group_is_valid_summary
                 Is shared group valid?
      DESCR    : &g_shared_group_is_valid_descr
                 >
                 This method tests the consistency/validity of a shared group.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if consistent/valid, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_is_valid
        DESCR  :
  - g_shared_group_has_changed:
      NAMES    : has_changed
      SUMMARY  : &g_shared_group_has_changed_summary
                 Has shared group been changed since last transaction?
      DESCR    : &g_shared_group_has_changed_descr
                 >
                 This method tests if the shared group has been modified (by another process),
                 since the last transaction.
                 
                 It has very little overhead and does not affect other processes, so it is
                 ok to call it at regular intervals (like in the idle handler of an application).
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> if it has changed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_has_changed
        DESCR  :
- Write transactions:
  METHODS:
  - g_shared_group_begin_write:
      NAMES    : begin_write
      SUMMARY  : &g_shared_group_begin_write_summary
                 Initiate a transaction.
      DESCR    : &g_shared_group_begin_write_descr
                 Begin writing to a shared group.
      RETURN:                 
        TYPES  : Group&
        DESCR  : A group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_begin_write
        DESCR  : 
  - g_shared_group_begin_commit:
      NAMES    : commit
      SUMMARY  : &g_shared_group_commit_summary
                 Commit a transaction.
      DESCR    : &g_shared_group_commit_descr
                 This method closes a transaction and changes are written to the group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_commit
        DESCR  : 
  - g_shared_group_rollback:
      NAMES    : rollback
      SUMMARY  : &g_shared_group_rollback_summary
                 Rollback a transaction.
      DESCR    : &g_shared_group_rollback_descr
                 This method descards all changes.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_rollback
        DESCR  : 
  - g_shared_group_interrupt_transact:
      NAMES    : interrupt_transact
      SUMMARY  : &g_shared_group_interrupt_transact_summary
                 Interrupt any blocking call.
      DESCR    : &g_shared_group_interrupt_transact_descr
                 >
                 This function may be called asynchronously to interrupt any
                 blocking call that is part of a transaction in a replication
                 setup. Only {@link g_shared_group_begin_write} and 
                 modifying function that are part
                 of a write transaction can block. The transaction is
                 interrupted only if such a call is blocked or would
                 block. This function may be called from a different thread. It
                 may not be called directly from a system signal handler. When
                 a transaction is interrupted, the only valid member function
                 to call is {@link g_shared_group_rollback}. If a client calls
                 {@link g_shared_group_clear_interrupt_transact} after having 
                 called {@link g_shared_group_rollback}, it
                 may then resume normal operation on this database/shared group. 
                 Currently,
                 transaction interruption works by throwing an exception from
                 one of the mentioned member functions that may block.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_interrupt_transact 
        DESCR  : 
  - g_shared_group_clear_interrupt_transact:
      NAMES    : clear_interrupt_transact
      SUMMARY  : &g_shared_group_clear_interrupt_transact_summary
                 Clean up interrupted state.
      DESCR    : &g_shared_group_clear_interrupt_transact_descr
                 >
                 This method clears the interrupted state of the shared group after rolling
                 back a transaction. It is not an error to call this function
                 in a situation where no interruption has occured. 
      SEE      : g_shared_group_interrupt_transact
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_clear_interrupt_transact 
        DESCR  : 
- Read transactions:
  METHODS:
  - g_shared_group_begin_read:
      NAMES    : begin_read
      SUMMARY  : &g_shared_group_begin_read_summary
                 Initiate reading.
      DESCR    : &g_shared_group_begin_read_descr
                 Begin reading from a shared group.
      CONST    : True             
      RETURN:                 
        TYPES  : Group&
        DESCR  : A group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_begin_read
        DESCR  : 
  - g_shared_group_end_read:
      NAMES    : end_read
      SUMMARY  : &g_shared_group_end_read_summary
                 Stop reading from a group.
      DESCR    : &g_shared_group_end_read_descr
                 This method stops reading from a shared group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_end_read
        DESCR  : 

