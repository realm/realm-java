#
# Java reference documentation for Table class
#
#TODO:
# updateFromSpec, getTableSpec

ID         : class_typed_table
TITLE      : Table (typed)
SUMMARY    : >
             NOTE: Reference documentation for Typed API is work in progress!
DESCR      : >
             NOTE: The reference documentation for the "Typed Table" API is
             "work in progress" and absolutely not complete yet.
#SUMMARY    : *g_typed_table_summary
#DESCR      : *g_typed_table_descr
SEE        : 
EXAMPLES   :
- DESCR    : >
             Tables in the typed interface are defined using the following syntax.
  CODE     : ex_java_typed_table_definition
- DESCR    : >
             Below examples will showcase all the available methods in a typed Table.
             
             More specific examples are (soon) available in the detailed description 
             of each method above.
  CODE     : ex_java_typed_table_intro
- DESCR    : >
             Below examples show how to use subtables in typed tables.
  CODE     : ex_java_typed_table_intro_subtables
IGNORE     : [g_dyn_table_where_const, 
              g_dyn_table_find_all_bool_const,
              g_dyn_table_find_all_int_const,
              g_dyn_table_find_all_date_const, 
              g_dyn_table_find_all_string_const, 
              g_dyn_table_find_all_float_const,
              g_dyn_table_find_all_double_const, 
              g_dyn_table_find_all_binary_const,
              g_dyn_table_get_sorted_view_const,
              g_dyn_table_get_subtable_const,
              g_dyn_table_distinct_const,
              g_dyn_table_set_enum,
              g_dyn_table_insert_bool, g_dyn_table_insert_int, g_dyn_table_insert_enum, 
              g_dyn_table_insert_float, g_dyn_table_insert_double, g_dyn_table_insert_date, 
              g_dyn_table_insert_string, g_dyn_table_insert_binary, g_dyn_table_insert_mixed,
              g_dyn_table_insert_subtable, g_dyn_table_insert_done
              ]

CATEGORIES :

- Table Schema:
  METHODS:
  - g_typed_table_schema:
      NAMES    : '@DefineTable'
      DESCR    : Define a typed table including it's columns and subtables.<br><br> The Column Types can be any of the following&#58;<br> boolean, java.util.Date, double, int. long, float, String, byte[], other defined tables and Object.
      SUMMARY  : Define a typed table.
      SIGNATURE: |
                  @DefineTable
                  class TableName {
                    ColumnType  columnName;
                    ColumnType  columnName;
                    etc...
                  }


      RETURN:
        TYPES  : Table
        DESCR  : Generates 4 classes for each defined table&#58;<br> 'TableName'Table, 'TableName'Query, 'TableName'View and 'TableName'Row.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_java_typed_table_definition

- Constructor:
  METHODS:
  - g_typed_table_constructor_plain:
  - g_typed_table_constructor_group:
  - g_typed_table_constructor_group_name:
      TITLE    : Table
      NAMES    : [Table, Table, Table]
      DESCR    : Create a typed table. A Group or Transaction (extends Group) can be parsed as parameter thereby attaching the table to the group.
      SUMMARY  : Create a typed table.
      SIGNATURE: |
                 Table()
                 Table(Group group)
                 Table(Group group, String tableName)
      PARAMS:
      - NAME   : group
        TYPES  : com.tight.Group
        DESCR  : A tightdb group. 
      - NAME   : tableName
        TYPES  : String
        DESCR  : The name of the table in the group.

      RETURN:
        TYPES  : Table
        DESCR  : If table already exist in group, a typed table with exisiting data is returned. Otherwise a new empty typed table is returned.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_java_table_constructor_plain
      - DESCR  :
        CODE   : ex_java_table_constructor_group
      - DESCR  :
        CODE   : ex_java_table_constructor_group_name

- Table:
  METHODS:
  - g_typed_table_is_attached:
      NAMES    : isValid
      SUMMARY  : &java_dyn_table_is_attached_summary
                 Check whether this table  is valid.
      DESCR    : &java_dyn_table_is_attached_descr
                 A table accessor that is no longer valid must not
                 be accessed in any way except by calling
                 isValid(). A table accessor that is obtained from
                 a Group becomes detached if its group accessor is
                 destroyed. This is also true for any subtable
                 accessor that is obtained indirectly from a group. A
                 subtable accessor will generally become detached if
                 its parent table is modified. An accessor
                 for a freestanding table will never become
                 detached. An accessor for a subtable of a
                 freestanding table may become detached.
      RETURN:
        TYPES  : boolean
        DESCR  : *g_dyn_table_is_attached_return_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_is_valid
        DESCR  :
  - g_typed_table_size:
      NAMES    : size
      SUMMARY  : *g_typed_table_size_summary
      DESCR    : *g_typed_table_size_descr
      RETURN:
        TYPES  : long
        DESCR  : *g_typed_table_size_return1_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_size
        DESCR  :
  - g_typed_table_is_empty:
      NAMES    : isEmpty
      SUMMARY  : *g_typed_table_is_empty_summary
      DESCR    : *g_typed_table_is_empty_descr
      RETURN:
        TYPES  : boolean
        DESCR  : *g_typed_table_true_false
      EXAMPLES:
      - CODE   : ex_java_typed_table_is_empty
        DESCR  :
  - g_typed_table_clear:
      NAMES    : clear
      SUMMARY  : *g_typed_table_clear_summary
      DESCR    : *g_typed_table_clear_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_clear
        DESCR  :
      SEE      : >
                See also {@link g_typed_table_is_empty}.
  - g_typed_table_optimize:
      NAMES    : optimize
      SUMMARY  : *g_typed_table_optimize_summary
      DESCR    : *g_typed_table_optimize_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_optimize
        DESCR  :


# TODO: add
#  - g_dyn_table_opertator==:
#      NAMES    : operator==
#      SUMMARY  : *g_dyn_table_operator_eq_summary
#      PARAMS:
#      - NAME   : table
#        TYPES  : Table
#        DESCR  : *g_dyn_table_operator_eq_table_descr
#      RETURN:
#        TYPES  : boolean
#        DESCR  : *g_dyn_table_operator_eq_return_descr
#      EXAMPLES:
#      - CODE   : ex_java_dyn_table_operator==
#        DESCR  :


- Columns:
  METHODS:

  - g_typed_table_column_set_all:
      TITLE    : columnName.setAll
      NAMES    : columnName.sum
      SUMMARY  : Set a value to all rows in a column.
      DESCR    : Set a value to all rows in a column.
      RETURN:
        TYPES  : double
        DESCR  : The sum number of the values in the column.
      EXAMPLES:
      - CODE   : ex_java_typed_table_column_set_all
        DESCR  :

  - g_typed_table_set_index:
      NAMES    : columnName.setIndex
      SUMMARY  : *g_dyn_table_set_index_summary
      DESCR    : *g_dyn_table_set_index_descr
      PARAMS:
      - NAME   : columnIndex
        TYPES  : long
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_set_index
        DESCR  :
  - g_typed_table_has_index:
      NAMES    : columnName.hasIndex
      SUMMARY  : *g_dyn_table_has_index_summary
      DESCR    : *g_dyn_table_has_index_descr
      PARAMS:
      - NAME   : columnIndex
        TYPES  : long
        DESCR  : *g_dyn_table_get_xxx_parm1_descr
      RETURN:
        TYPES  : boolean
        DESCR  : <code>true</code> if column is indexed, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_java_typed_table_has_index
        DESCR  :

  - g_typed_table_column_sum:
      TITLE    : columnName.sum
      NAMES    : columnName.sum
      SUMMARY  : Perform a sum operation on the column.
      DESCR    : Perform a sum operation on the column. <br> <br>NB! Only accessible on int, long, double and float columns.
      RETURN:
        TYPES  : double
        DESCR  : The sum number of the values in the column.
      EXAMPLES:
      - CODE   : ex_java_typed_table_column_sum
        DESCR  :
  
  - g_typed_table_column_average:
      TITLE    : columnName.average
      NAMES    : columnName.average
      SUMMARY  : Perform an average operation on the column.
      DESCR    : Perform an average operation on the column. <br> <br>NB! Only accessible on int, long, double and float columns.
      RETURN:
        TYPES  : double
        DESCR  : The average number of the values in the column.
      EXAMPLES:
      - CODE   : ex_java_typed_table_column_average
        DESCR  :

  - g_typed_table_column_minimum:
      TITLE    : columnName.minimum
      NAMES    : columnName.minimum
      SUMMARY  : Perform a minimum operation on the column.
      DESCR    : Perform a minimum operation on the column. <br> <br>NB! Only accessible on int, long, double and float columns.
      RETURN:
        TYPES  : double
        DESCR  : The minimum number of the values in the column.
      EXAMPLES:
      - CODE   : ex_java_typed_table_column_minimum
        DESCR  :

  - g_typed_table_column_maximum:
      TITLE    : columnName.maximum
      NAMES    : columnName.maximum
      SUMMARY  : Perform a maximum operation on the column.
      DESCR    : Perform a maximum operation on the column. <br> <br>NB! Only accessible on int, long, double and float columns.
      RETURN:
        TYPES  : double
        DESCR  : The maximum number of the values in the column.
      EXAMPLES:
      - CODE   : ex_java_typed_table_column_maximum
        DESCR  :


#   - g_typed_table_get_column_name:
#       NAMES    : getColumnName
#       SUMMARY  : *g_dyn_table_get_column_name_summary
#       DESCR    : *g_dyn_table_get_column_name_descr
#       PARAMS:
#       - NAME   : columnIndex
#         TYPES  : long
#         DESCR  : *g_dyn_table_get_column_name_param1_descr
#       RETURN:
#         TYPES  : String
#         DESCR  : *g_dyn_table_get_column_name_return_descr
#       EXAMPLES:
#       - CODE   : ex_java_typed_table_get_column_name
#         DESCR  :
#   - g_typed_table_get_column_index:
#       NAMES    : getColumnIndex
#       SUMMARY  : *g_dyn_table_get_column_index_summary
#       DESCR    : *g_dyn_table_get_column_index_descr
#       PARAMS:
#       - NAME   : columnName
#         TYPES  : String
#         DESCR  : The name of the column to find.
#       RETURN:
#         TYPES  : long
#         DESCR  : The column index or -1 if there is no column with the specified name.
#       EXAMPLES:
#       - CODE   : ex_java_typed_table_get_column_index
#         DESCR  :
#   - g_typed_table_get_column_type:
#       NAMES    : getColumnType
#       SUMMARY  : *g_dyn_table_get_column_type_summary
#       DESCR    : >
#                  This method returns the type of a column using the column index. Currently,
#                  the following types are supported from the <code>ColumnType</code> class:
#                  <ul>
#                    <li><code>BOOLEAN</code></li>
#                    <li><code>INTEGER</code></li>
#                    <li><code>FLOAT</code></li>
#                    <li><code>DOUBLE</code></li>
#                    <li><code>STRING</code></li>
#                    <li><code>BINARY</code></li>
#                    <li><code>DATE</code></li>
#                    <li><code>TABLE</code></li>
#                    <li><code>MIXED</code></li>
#                  </ul>
#       PARAMS:
#       - NAME   : columnIndex
#         TYPES  : long
#         DESCR  : The column index.
#       RETURN:
#         TYPES  : ColumnType
#         DESCR  : The column type.
#       EXAMPLES:
#       - CODE   : ex_java_typed_table_get_column_type
#         DESCR  :





- Rows:
  METHODS:
  - g_typed_table_operator_brackets:
      NAMES    : get
      SUMMARY  : *g_typed_table_operator_brackets_summary
      DESCR    : *g_typed_table_operator_brackets_descr
      RETURN:
        TYPES  : "*Row"
        DESCR  : "*Row found at <code>rowIndex</code>."
      PARAMS:
      - NAME   : rowIndex
        TYPES  : long
        DESCR  : *g_typed_table_operator_brackets_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_get_row
        DESCR  :

  - g_typed_table_add:
      NAMES    : add
      SUMMARY  : Append a row.
      DESCR    : This method adds one row at the end of the table.
      PARAMS:
      - NAME   : values
        TYPES  : Object...
        DESCR  : For each column in the tables you must provide a parameter with a matching type
                 in the same order as the columns are defined.
#TODO: return index added
      EXAMPLES:
      - CODE   : ex_java_typed_table_add
        DESCR  :
      SEE      : >
                See {@link g_typed_table_add_empty_row} to insert an empty row.
#                See {@link g_typed_table_insert} to insert a row into a specific row index.
  - g_typed_table_add_empty_row:
      NAMES    : addEmptyRow
      SUMMARY  : Append one empty row.
      DESCR    : This method adds one empty row with default values at the end of the table.
                 The default values are 0, null, or "", as appropriate to the column types.
      RETURN:
        TYPES  : "*Row"
        DESCR  : The new row which was inserted.
      EXAMPLES:
      - CODE   : ex_java_typed_table_add_empty_row
        DESCR  :
      SEE      : >
                 See also {@link g_typed_table_add} to add rows with specific values.
  - g_typed_table_remove_row:
      NAMES    : remove
      SUMMARY  : *g_typed_table_remove_row_summary
      DESCR    : *g_typed_table_remove_row_descr
      PARAMS:
      - NAME   : rowIndex
        TYPES  : long
        DESCR  : *g_typed_table_delete_position_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_remove
        DESCR  :
  - g_typed_table_remove_last_row:
      NAMES    : removeLast
      SUMMARY  : *g_typed_table_remove_last_row_summary
      DESCR    : *g_typed_table_remove_last_row_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_remove_last_row
        DESCR  :

- Rows:
  METHODS:
  - g_typed_table_operator_brackets:
      NAMES    : get
      SUMMARY  : *g_typed_table_operator_brackets_summary
      DESCR    : *g_typed_table_operator_brackets_descr
      RETURN:
        TYPES  : "*Row"
        DESCR  : "*Row found at <code>rowIndex</code>."
      PARAMS:
      - NAME   : rowIndex
        TYPES  : long
        DESCR  : *g_typed_table_operator_brackets_descr
      EXAMPLES:
      - CODE   : ex_java_typed_table_get
        DESCR  :



  
- Cell:
  METHODS:
# 
  - g_typed_table_column_get_value:
      NAMES    : get(rowIndex).getColumnName
      SUMMARY  : Get a value from a named column in a specific row.
      DESCR    : Get a value from a named column in a specific row.
      RETURN:
        TYPES  : Depends on the column name.
        DESCR  : The value in the cell.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_java_typed_table_column_get_value
  - g_typed_table_column_set_value:
      NAMES    : set(rowIndex).setColumnName
      SUMMARY  : Set a value from a named column in a specific row.
      DESCR    : Set a value from a named column in a specific row.
      EXAMPLES:
      - DESCR  :
        CODE   : ex_java_typed_table_column_set_value


- Searching:
  METHODS:

  - g_dyn_table_where:
      NAMES    : where
      SUMMARY  : *g_typed_table_where_summary
      DESCR    : *g_typed_table_where_descr
      RETURN:
        TYPES  : Typed Query
        DESCR  : A generated query object corresponding to the typed table.
      EXAMPLES:
      - CODE   : ex_java_typed_table_where
        DESCR  :   
  - g_dyn_table_column_find_all:
      NAMES    : columnName.findAll
      SUMMARY  : *g_typed_table_find_all_xxx_summary
      DESCR    : *g_typed_table_find_all_xxx_descr
      RETURN:
        TYPES  : TableView
        DESCR  : *g_typed_table_find_all_return1_descr
      EXAMPLES:
      - CODE   : ex_java_dyn_table_find_all
        DESCR  :        
  - g_dyn_table_column_find_first:
      NAMES    : columnName.findFirst
      SUMMARY  : *g_typed_table_find_first_xxx_summary
      DESCR    : *g_typed_table_find_first_xxx_descr
      RETURN:
        TYPES  : long
        DESCR  : Row index of the first matching row.
      EXAMPLES:
      - CODE   : ex_java_dyn_table_find_first
        DESCR  :    


  - g_dyn_table_column_lookup:
      NAMES    : columnName.lookup
      SUMMARY  : *g_dyn_table_to_json_summary
      DESCR    : *g_dyn_table_to_json_descr
      RETURN:
        TYPES  : String
        DESCR  : A string with the JSON representation of the table.
      EXAMPLES:
      - CODE   : ex_java_typed_table_lookup
        DESCR  :   

  - g_dyn_table_column_equal_to:
      NAMES    : columnName.equalTo
      SUMMARY  : *g_dyn_table_to_json_summary
      DESCR    : *g_dyn_table_to_json_descr
      RETURN:
        TYPES  : String
        DESCR  : A string with the JSON representation of the table.
      EXAMPLES:
      - CODE   : ex_java_dyn_table_equal_to
        DESCR  : 

  - g_dyn_table_column_contains:
      NAMES    : columnName.contains
      SUMMARY  : Finds all rows with Strings containing the specified String.
      DESCR    : Finds all rows with Strings containing the specified String. <br><br> NB! Only works on String columns.
      RETURN:
        TYPES  : TableQuery
        DESCR  : A typed query.
      EXAMPLES:
      - CODE   : ex_java_typed_table_contains
        DESCR  : 
  - g_dyn_table_column_ends_with:
      NAMES    : columnName.endsWith
      SUMMARY  : Finds all rows with Strings ending with the specified String.
      DESCR    : Finds all rows with Strings ending with the specified String. <br><br> NB! Only works on String columns.
      RETURN:
        TYPES  : TableQuery
        DESCR  : A typed query.
      EXAMPLES:
      - CODE   : ex_java_typed_table_ends_with
        DESCR  : 
        
- Dump:
  METHODS:
  - g_dyn_table_to_json:
      NAMES    : toJson
      SUMMARY  : *g_dyn_table_to_json_summary
      DESCR    : *g_dyn_table_to_json_descr
      RETURN:
        TYPES  : String
        DESCR  : A string with the JSON representation of the table.
      EXAMPLES:
      - CODE   : ex_java_typed_table_to_json
        DESCR  :
# TODO  - g_dyn_table_to_string:
#      NAMES    : to_string
#      SUMMARY  : *g_dyn_table_to_string_summary
#      DESCR    : *g_dyn_table_to_string_descr
#      PARAMS:
#      - NAME   : out
#        TYPES  : std::ostream&
#        DESCR  : Output stream.
#      - NAME   : limit
#        TYPES  : long
#        DESCR  : "The number of rows to convert. Default: 500."
#      EXAMPLES:
#      - CODE   : ex_java_dyn_table_to_string
#        DESCR  :
# TODO - g_dyn_table_row_to_string:
#      NAMES    : to_string
#      SUMMARY  : *g_dyn_table_row_to_string_summary
#      DESCR    : *g_dyn_table_row_to_string_descr
#      PARAMS:
#      - NAME   : row_ndx
#        TYPES  : long
#        DESCR  : The row index.
#      - NAME   : out
#        TYPES  : std::ostream&
#        DESCR  : Output stream.
#      EXAMPLES:
#      - CODE   : ex_java_dyn_table_to_string
#        DESCR  :
